
CalculatorUsingLCDandKeypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  000030f4  00003188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cd  008000a6  008000a6  000031ce  2**0
                  ALLOC
  3 .stab         000024cc  00000000  00000000  000031d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e82  00000000  00000000  0000569c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000651e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000665e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000067ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008417  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009302  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a0b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a49d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ac6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 37       	cpi	r26, 0x73	; 115
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 78 18 	jmp	0x30f0	; 0x30f0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 10 18 	jmp	0x3020	; 0x3020 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e9       	ldi	r26, 0x9D	; 157
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2c 18 	jmp	0x3058	; 0x3058 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1c 18 	jmp	0x3038	; 0x3038 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 38 18 	jmp	0x3070	; 0x3070 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1c 18 	jmp	0x3038	; 0x3038 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 38 18 	jmp	0x3070	; 0x3070 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 10 18 	jmp	0x3020	; 0x3020 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e9       	ldi	r24, 0x9D	; 157
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2c 18 	jmp	0x3058	; 0x3058 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1c 18 	jmp	0x3038	; 0x3038 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 38 18 	jmp	0x3070	; 0x3070 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1c 18 	jmp	0x3038	; 0x3038 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 38 18 	jmp	0x3070	; 0x3070 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1c 18 	jmp	0x3038	; 0x3038 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 38 18 	jmp	0x3070	; 0x3070 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 20 18 	jmp	0x3040	; 0x3040 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3c 18 	jmp	0x3078	; 0x3078 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

char expr[MAX_EXPRESSION_LENGTH];
char * str;

// the Main function (Entry Point)
int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
     b5a:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_init>

	LCD_displayStringRowColumn(0,0," LCD Calculator ");
     b5e:	20 e6       	ldi	r18, 0x60	; 96
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	a9 01       	movw	r20, r18
     b68:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <LCD_displayStringRowColumn>

	LCD_moveCursor(1,0); 			/* Move the cursor to the second row */
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_moveCursor>

	str = get_expression();
     b74:	0e 94 50 06 	call	0xca0	; 0xca0 <get_expression>
     b78:	90 93 72 01 	sts	0x0172, r25
     b7c:	80 93 71 01 	sts	0x0171, r24
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	aa ef       	ldi	r26, 0xFA	; 250
     b86:	b3 e4       	ldi	r27, 0x43	; 67
     b88:	8b 87       	std	Y+11, r24	; 0x0b
     b8a:	9c 87       	std	Y+12, r25	; 0x0c
     b8c:	ad 87       	std	Y+13, r26	; 0x0d
     b8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b90:	6b 85       	ldd	r22, Y+11	; 0x0b
     b92:	7c 85       	ldd	r23, Y+12	; 0x0c
     b94:	8d 85       	ldd	r24, Y+13	; 0x0d
     b96:	9e 85       	ldd	r25, Y+14	; 0x0e
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	4a e7       	ldi	r20, 0x7A	; 122
     b9e:	55 e4       	ldi	r21, 0x45	; 69
     ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba4:	dc 01       	movw	r26, r24
     ba6:	cb 01       	movw	r24, r22
     ba8:	8f 83       	std	Y+7, r24	; 0x07
     baa:	98 87       	std	Y+8, r25	; 0x08
     bac:	a9 87       	std	Y+9, r26	; 0x09
     bae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb0:	6f 81       	ldd	r22, Y+7	; 0x07
     bb2:	78 85       	ldd	r23, Y+8	; 0x08
     bb4:	89 85       	ldd	r24, Y+9	; 0x09
     bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	40 e8       	ldi	r20, 0x80	; 128
     bbe:	5f e3       	ldi	r21, 0x3F	; 63
     bc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc4:	88 23       	and	r24, r24
     bc6:	2c f4       	brge	.+10     	; 0xbd2 <main+0x8c>
		__ticks = 1;
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	9e 83       	std	Y+6, r25	; 0x06
     bce:	8d 83       	std	Y+5, r24	; 0x05
     bd0:	3f c0       	rjmp	.+126    	; 0xc50 <main+0x10a>
	else if (__tmp > 65535)
     bd2:	6f 81       	ldd	r22, Y+7	; 0x07
     bd4:	78 85       	ldd	r23, Y+8	; 0x08
     bd6:	89 85       	ldd	r24, Y+9	; 0x09
     bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	3f ef       	ldi	r19, 0xFF	; 255
     bde:	4f e7       	ldi	r20, 0x7F	; 127
     be0:	57 e4       	ldi	r21, 0x47	; 71
     be2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be6:	18 16       	cp	r1, r24
     be8:	4c f5       	brge	.+82     	; 0xc3c <main+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bea:	6b 85       	ldd	r22, Y+11	; 0x0b
     bec:	7c 85       	ldd	r23, Y+12	; 0x0c
     bee:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	40 e2       	ldi	r20, 0x20	; 32
     bf8:	51 e4       	ldi	r21, 0x41	; 65
     bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bfe:	dc 01       	movw	r26, r24
     c00:	cb 01       	movw	r24, r22
     c02:	bc 01       	movw	r22, r24
     c04:	cd 01       	movw	r24, r26
     c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0a:	dc 01       	movw	r26, r24
     c0c:	cb 01       	movw	r24, r22
     c0e:	9e 83       	std	Y+6, r25	; 0x06
     c10:	8d 83       	std	Y+5, r24	; 0x05
     c12:	0f c0       	rjmp	.+30     	; 0xc32 <main+0xec>
     c14:	80 e9       	ldi	r24, 0x90	; 144
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	9c 83       	std	Y+4, r25	; 0x04
     c1a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	9c 81       	ldd	r25, Y+4	; 0x04
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <main+0xda>
     c24:	9c 83       	std	Y+4, r25	; 0x04
     c26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c28:	8d 81       	ldd	r24, Y+5	; 0x05
     c2a:	9e 81       	ldd	r25, Y+6	; 0x06
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	9e 83       	std	Y+6, r25	; 0x06
     c30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c32:	8d 81       	ldd	r24, Y+5	; 0x05
     c34:	9e 81       	ldd	r25, Y+6	; 0x06
     c36:	00 97       	sbiw	r24, 0x00	; 0
     c38:	69 f7       	brne	.-38     	; 0xc14 <main+0xce>
     c3a:	14 c0       	rjmp	.+40     	; 0xc64 <main+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3c:	6f 81       	ldd	r22, Y+7	; 0x07
     c3e:	78 85       	ldd	r23, Y+8	; 0x08
     c40:	89 85       	ldd	r24, Y+9	; 0x09
     c42:	9a 85       	ldd	r25, Y+10	; 0x0a
     c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	9e 83       	std	Y+6, r25	; 0x06
     c4e:	8d 83       	std	Y+5, r24	; 0x05
     c50:	8d 81       	ldd	r24, Y+5	; 0x05
     c52:	9e 81       	ldd	r25, Y+6	; 0x06
     c54:	9a 83       	std	Y+2, r25	; 0x02
     c56:	89 83       	std	Y+1, r24	; 0x01
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	01 97       	sbiw	r24, 0x01	; 1
     c5e:	f1 f7       	brne	.-4      	; 0xc5c <main+0x116>
     c60:	9a 83       	std	Y+2, r25	; 0x02
     c62:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500); 				/* Press time */

	LCD_displayString("=");
     c64:	81 e7       	ldi	r24, 0x71	; 113
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 38 17 	call	0x2e70	; 0x2e70 <LCD_displayString>
	LCD_intgerToString(evaluateExpression(expr,exp_length));
     c6c:	20 91 a7 00 	lds	r18, 0x00A7
     c70:	89 ea       	ldi	r24, 0xA9	; 169
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	62 2f       	mov	r22, r18
     c76:	0e 94 89 07 	call	0xf12	; 0xf12 <evaluateExpression>
     c7a:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_intgerToString>


	while(1){
//		key = KEYPAD_getPressedKey();
		if(KEYPAD_getPressedKey() == (uint8)13){
     c7e:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <KEYPAD_getPressedKey>
     c82:	8d 30       	cpi	r24, 0x0D	; 13
     c84:	e1 f7       	brne	.-8      	; 0xc7e <main+0x138>
			LCD_moveCursor(1, 0);
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_moveCursor>
			LCD_displayString("                ");
     c8e:	83 e7       	ldi	r24, 0x73	; 115
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 38 17 	call	0x2e70	; 0x2e70 <LCD_displayString>
			LCD_moveCursor(1, 0);
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_moveCursor>
     c9e:	ef cf       	rjmp	.-34     	; 0xc7e <main+0x138>

00000ca0 <get_expression>:
		}
	}
}

// function to get the equation in form of string expression
char * get_expression(){
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	60 97       	sbiw	r28, 0x10	; 16
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
	//	uint8 exp_length = 0;
	while(1){
		key = KEYPAD_getPressedKey();
     cb4:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <KEYPAD_getPressedKey>
     cb8:	80 93 a8 00 	sts	0x00A8, r24

		if(key == 13){
     cbc:	80 91 a8 00 	lds	r24, 0x00A8
     cc0:	8d 30       	cpi	r24, 0x0D	; 13
     cc2:	61 f4       	brne	.+24     	; 0xcdc <get_expression+0x3c>
			LCD_moveCursor(1, 0);
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_moveCursor>
			LCD_displayString("                ");
     ccc:	83 e7       	ldi	r24, 0x73	; 115
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 38 17 	call	0x2e70	; 0x2e70 <LCD_displayString>
			LCD_moveCursor(1, 0);
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_moveCursor>
		}

		if (key == '=') {
     cdc:	80 91 a8 00 	lds	r24, 0x00A8
     ce0:	8d 33       	cpi	r24, 0x3D	; 61
     ce2:	99 f4       	brne	.+38     	; 0xd0a <get_expression+0x6a>
			expr[exp_length] = '\0';  // Null-terminate the string
     ce4:	80 91 a7 00 	lds	r24, 0x00A7
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	fc 01       	movw	r30, r24
     cee:	e7 55       	subi	r30, 0x57	; 87
     cf0:	ff 4f       	sbci	r31, 0xFF	; 255
     cf2:	10 82       	st	Z, r1
			return expr;  // Return the global expression as a string
     cf4:	89 ea       	ldi	r24, 0xA9	; 169
     cf6:	90 e0       	ldi	r25, 0x00	; 0

		displaySympol(key);

		_delay_ms(500); /* Press time */
	}
}
     cf8:	60 96       	adiw	r28, 0x10	; 16
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	08 95       	ret
		if (key == '=') {
			expr[exp_length] = '\0';  // Null-terminate the string
			return expr;  // Return the global expression as a string
		}

		if ((key >= 0) && (key <= 9)) {
     d0a:	80 91 a8 00 	lds	r24, 0x00A8
     d0e:	8a 30       	cpi	r24, 0x0A	; 10
     d10:	b0 f4       	brcc	.+44     	; 0xd3e <get_expression+0x9e>
			// Handle numeric keys
			if (exp_length < MAX_EXPRESSION_LENGTH - 1) {
     d12:	80 91 a7 00 	lds	r24, 0x00A7
     d16:	87 3c       	cpi	r24, 0xC7	; 199
     d18:	08 f0       	brcs	.+2      	; 0xd1c <get_expression+0x7c>
     d1a:	6e c0       	rjmp	.+220    	; 0xdf8 <get_expression+0x158>
				expr[exp_length] = key + '0'; 		// adding '0' to convert key to its corresponding ASCII
     d1c:	80 91 a7 00 	lds	r24, 0x00A7
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	80 91 a8 00 	lds	r24, 0x00A8
     d28:	80 5d       	subi	r24, 0xD0	; 208
     d2a:	f9 01       	movw	r30, r18
     d2c:	e7 55       	subi	r30, 0x57	; 87
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
     d30:	80 83       	st	Z, r24
				exp_length++;
     d32:	80 91 a7 00 	lds	r24, 0x00A7
     d36:	8f 5f       	subi	r24, 0xFF	; 255
     d38:	80 93 a7 00 	sts	0x00A7, r24
     d3c:	5d c0       	rjmp	.+186    	; 0xdf8 <get_expression+0x158>
			}
		} else {
			// Handle non-numeric keys
			if (exp_length < MAX_EXPRESSION_LENGTH - 1) {
     d3e:	80 91 a7 00 	lds	r24, 0x00A7
     d42:	87 3c       	cpi	r24, 0xC7	; 199
     d44:	08 f0       	brcs	.+2      	; 0xd48 <get_expression+0xa8>
     d46:	58 c0       	rjmp	.+176    	; 0xdf8 <get_expression+0x158>
				switch(key){
     d48:	80 91 a8 00 	lds	r24, 0x00A8
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	38 8b       	std	Y+16, r19	; 0x10
     d52:	2f 87       	std	Y+15, r18	; 0x0f
     d54:	8f 85       	ldd	r24, Y+15	; 0x0f
     d56:	98 89       	ldd	r25, Y+16	; 0x10
     d58:	8b 32       	cpi	r24, 0x2B	; 43
     d5a:	91 05       	cpc	r25, r1
     d5c:	b1 f0       	breq	.+44     	; 0xd8a <get_expression+0xea>
     d5e:	2f 85       	ldd	r18, Y+15	; 0x0f
     d60:	38 89       	ldd	r19, Y+16	; 0x10
     d62:	2c 32       	cpi	r18, 0x2C	; 44
     d64:	31 05       	cpc	r19, r1
     d66:	34 f4       	brge	.+12     	; 0xd74 <get_expression+0xd4>
     d68:	8f 85       	ldd	r24, Y+15	; 0x0f
     d6a:	98 89       	ldd	r25, Y+16	; 0x10
     d6c:	8a 32       	cpi	r24, 0x2A	; 42
     d6e:	91 05       	cpc	r25, r1
     d70:	01 f1       	breq	.+64     	; 0xdb2 <get_expression+0x112>
     d72:	33 c0       	rjmp	.+102    	; 0xdda <get_expression+0x13a>
     d74:	2f 85       	ldd	r18, Y+15	; 0x0f
     d76:	38 89       	ldd	r19, Y+16	; 0x10
     d78:	2d 32       	cpi	r18, 0x2D	; 45
     d7a:	31 05       	cpc	r19, r1
     d7c:	81 f0       	breq	.+32     	; 0xd9e <get_expression+0xfe>
     d7e:	8f 85       	ldd	r24, Y+15	; 0x0f
     d80:	98 89       	ldd	r25, Y+16	; 0x10
     d82:	8f 32       	cpi	r24, 0x2F	; 47
     d84:	91 05       	cpc	r25, r1
     d86:	f9 f0       	breq	.+62     	; 0xdc6 <get_expression+0x126>
     d88:	28 c0       	rjmp	.+80     	; 0xdda <get_expression+0x13a>
				case '+':
					expr[exp_length] = '+'; 		// adding '0' to convert key to its corresponding ASCII
     d8a:	80 91 a7 00 	lds	r24, 0x00A7
     d8e:	88 2f       	mov	r24, r24
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	fc 01       	movw	r30, r24
     d94:	e7 55       	subi	r30, 0x57	; 87
     d96:	ff 4f       	sbci	r31, 0xFF	; 255
     d98:	8b e2       	ldi	r24, 0x2B	; 43
     d9a:	80 83       	st	Z, r24
     d9c:	28 c0       	rjmp	.+80     	; 0xdee <get_expression+0x14e>

					break;
				case '-':
					expr[exp_length] = '-'; 		// adding '0' to convert key to its corresponding ASCII
     d9e:	80 91 a7 00 	lds	r24, 0x00A7
     da2:	88 2f       	mov	r24, r24
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	fc 01       	movw	r30, r24
     da8:	e7 55       	subi	r30, 0x57	; 87
     daa:	ff 4f       	sbci	r31, 0xFF	; 255
     dac:	8d e2       	ldi	r24, 0x2D	; 45
     dae:	80 83       	st	Z, r24
     db0:	1e c0       	rjmp	.+60     	; 0xdee <get_expression+0x14e>

					break;
				case '*':
					expr[exp_length] = '*'; 		// adding '0' to convert key to its corresponding ASCII
     db2:	80 91 a7 00 	lds	r24, 0x00A7
     db6:	88 2f       	mov	r24, r24
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	fc 01       	movw	r30, r24
     dbc:	e7 55       	subi	r30, 0x57	; 87
     dbe:	ff 4f       	sbci	r31, 0xFF	; 255
     dc0:	8a e2       	ldi	r24, 0x2A	; 42
     dc2:	80 83       	st	Z, r24
     dc4:	14 c0       	rjmp	.+40     	; 0xdee <get_expression+0x14e>

					break;
				case '/':
					expr[exp_length] = '/'; 		// adding '0' to convert key to its corresponding ASCII
     dc6:	80 91 a7 00 	lds	r24, 0x00A7
     dca:	88 2f       	mov	r24, r24
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	fc 01       	movw	r30, r24
     dd0:	e7 55       	subi	r30, 0x57	; 87
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	8f e2       	ldi	r24, 0x2F	; 47
     dd6:	80 83       	st	Z, r24
     dd8:	0a c0       	rjmp	.+20     	; 0xdee <get_expression+0x14e>

					break;
				default:
					expr[exp_length] = key; 		// adding '0' to convert key to its corresponding ASCII
     dda:	80 91 a7 00 	lds	r24, 0x00A7
     dde:	88 2f       	mov	r24, r24
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	20 91 a8 00 	lds	r18, 0x00A8
     de6:	fc 01       	movw	r30, r24
     de8:	e7 55       	subi	r30, 0x57	; 87
     dea:	ff 4f       	sbci	r31, 0xFF	; 255
     dec:	20 83       	st	Z, r18

				}
				exp_length++;
     dee:	80 91 a7 00 	lds	r24, 0x00A7
     df2:	8f 5f       	subi	r24, 0xFF	; 255
     df4:	80 93 a7 00 	sts	0x00A7, r24
			}
		}

		displaySympol(key);
     df8:	80 91 a8 00 	lds	r24, 0x00A8
     dfc:	0e 94 73 07 	call	0xee6	; 0xee6 <displaySympol>
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	aa ef       	ldi	r26, 0xFA	; 250
     e06:	b3 e4       	ldi	r27, 0x43	; 67
     e08:	8b 87       	std	Y+11, r24	; 0x0b
     e0a:	9c 87       	std	Y+12, r25	; 0x0c
     e0c:	ad 87       	std	Y+13, r26	; 0x0d
     e0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e10:	6b 85       	ldd	r22, Y+11	; 0x0b
     e12:	7c 85       	ldd	r23, Y+12	; 0x0c
     e14:	8d 85       	ldd	r24, Y+13	; 0x0d
     e16:	9e 85       	ldd	r25, Y+14	; 0x0e
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	4a e7       	ldi	r20, 0x7A	; 122
     e1e:	55 e4       	ldi	r21, 0x45	; 69
     e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	8f 83       	std	Y+7, r24	; 0x07
     e2a:	98 87       	std	Y+8, r25	; 0x08
     e2c:	a9 87       	std	Y+9, r26	; 0x09
     e2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e30:	6f 81       	ldd	r22, Y+7	; 0x07
     e32:	78 85       	ldd	r23, Y+8	; 0x08
     e34:	89 85       	ldd	r24, Y+9	; 0x09
     e36:	9a 85       	ldd	r25, Y+10	; 0x0a
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e8       	ldi	r20, 0x80	; 128
     e3e:	5f e3       	ldi	r21, 0x3F	; 63
     e40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e44:	88 23       	and	r24, r24
     e46:	2c f4       	brge	.+10     	; 0xe52 <get_expression+0x1b2>
		__ticks = 1;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
     e50:	3f c0       	rjmp	.+126    	; 0xed0 <get_expression+0x230>
	else if (__tmp > 65535)
     e52:	6f 81       	ldd	r22, Y+7	; 0x07
     e54:	78 85       	ldd	r23, Y+8	; 0x08
     e56:	89 85       	ldd	r24, Y+9	; 0x09
     e58:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	3f ef       	ldi	r19, 0xFF	; 255
     e5e:	4f e7       	ldi	r20, 0x7F	; 127
     e60:	57 e4       	ldi	r21, 0x47	; 71
     e62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e66:	18 16       	cp	r1, r24
     e68:	4c f5       	brge	.+82     	; 0xebc <get_expression+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e70:	9e 85       	ldd	r25, Y+14	; 0x0e
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e2       	ldi	r20, 0x20	; 32
     e78:	51 e4       	ldi	r21, 0x41	; 65
     e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	9e 83       	std	Y+6, r25	; 0x06
     e90:	8d 83       	std	Y+5, r24	; 0x05
     e92:	0f c0       	rjmp	.+30     	; 0xeb2 <get_expression+0x212>
     e94:	80 e9       	ldi	r24, 0x90	; 144
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	9c 83       	std	Y+4, r25	; 0x04
     e9a:	8b 83       	std	Y+3, r24	; 0x03
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <get_expression+0x200>
     ea4:	9c 83       	std	Y+4, r25	; 0x04
     ea6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	9e 83       	std	Y+6, r25	; 0x06
     eb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	69 f7       	brne	.-38     	; 0xe94 <get_expression+0x1f4>
     eba:	fc ce       	rjmp	.-520    	; 0xcb4 <get_expression+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	9e 83       	std	Y+6, r25	; 0x06
     ece:	8d 83       	std	Y+5, r24	; 0x05
     ed0:	8d 81       	ldd	r24, Y+5	; 0x05
     ed2:	9e 81       	ldd	r25, Y+6	; 0x06
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <get_expression+0x23c>
     ee0:	9a 83       	std	Y+2, r25	; 0x02
     ee2:	89 83       	std	Y+1, r24	; 0x01
     ee4:	e7 ce       	rjmp	.-562    	; 0xcb4 <get_expression+0x14>

00000ee6 <displaySympol>:
	}
}

// function to display symbols on the screen either "num" or +,-,*,/

void displaySympol(uint8 key){
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	0f 92       	push	r0
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	89 83       	std	Y+1, r24	; 0x01
	// Display the gotten key
	if((key <= 9) && (key >= 0))
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	8a 30       	cpi	r24, 0x0A	; 10
     ef6:	30 f4       	brcc	.+12     	; 0xf04 <displaySympol+0x1e>
	{
		LCD_intgerToString(key);   /* display the pressed keypad switch */
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	88 2f       	mov	r24, r24
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_intgerToString>
     f02:	03 c0       	rjmp	.+6      	; 0xf0a <displaySympol+0x24>
	}
	else
	{
		LCD_displayCharacter(key); /* display the pressed keypad switch */
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	0e 94 bd 12 	call	0x257a	; 0x257a <LCD_displayCharacter>
	}
}
     f0a:	0f 90       	pop	r0
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <evaluateExpression>:

// function takes string of the eq and evaluates it then return value
// (-VE) number handling
// the priority of operation handling

int evaluateExpression(const char *expression, uint8 exp_length){
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	62 97       	sbiw	r28, 0x12	; 18
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	9d 87       	std	Y+13, r25	; 0x0d
     f28:	8c 87       	std	Y+12, r24	; 0x0c
     f2a:	6e 87       	std	Y+14, r22	; 0x0e
	int result = 0;
     f2c:	1b 86       	std	Y+11, r1	; 0x0b
     f2e:	1a 86       	std	Y+10, r1	; 0x0a
	int num = 0;
     f30:	19 86       	std	Y+9, r1	; 0x09
     f32:	18 86       	std	Y+8, r1	; 0x08
	int sign = 1;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	9f 83       	std	Y+7, r25	; 0x07
     f3a:	8e 83       	std	Y+6, r24	; 0x06
     f3c:	f5 c0       	rjmp	.+490    	; 0x1128 <evaluateExpression+0x216>

	while (*expression && exp_length) {
		if (isdigit(*expression)) {
     f3e:	ec 85       	ldd	r30, Y+12	; 0x0c
     f40:	fd 85       	ldd	r31, Y+13	; 0x0d
     f42:	80 81       	ld	r24, Z
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	c0 97       	sbiw	r24, 0x30	; 48
     f4a:	8a 30       	cpi	r24, 0x0A	; 10
     f4c:	91 05       	cpc	r25, r1
     f4e:	b8 f4       	brcc	.+46     	; 0xf7e <evaluateExpression+0x6c>
			num = num * 10 + (*expression - '0');
     f50:	88 85       	ldd	r24, Y+8	; 0x08
     f52:	99 85       	ldd	r25, Y+9	; 0x09
     f54:	9c 01       	movw	r18, r24
     f56:	22 0f       	add	r18, r18
     f58:	33 1f       	adc	r19, r19
     f5a:	c9 01       	movw	r24, r18
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	28 0f       	add	r18, r24
     f66:	39 1f       	adc	r19, r25
     f68:	ec 85       	ldd	r30, Y+12	; 0x0c
     f6a:	fd 85       	ldd	r31, Y+13	; 0x0d
     f6c:	80 81       	ld	r24, Z
     f6e:	88 2f       	mov	r24, r24
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	c0 97       	sbiw	r24, 0x30	; 48
     f74:	82 0f       	add	r24, r18
     f76:	93 1f       	adc	r25, r19
     f78:	99 87       	std	Y+9, r25	; 0x09
     f7a:	88 87       	std	Y+8, r24	; 0x08
     f7c:	cd c0       	rjmp	.+410    	; 0x1118 <evaluateExpression+0x206>
		} else if (*expression == '+' || *expression == '-') {
     f7e:	ec 85       	ldd	r30, Y+12	; 0x0c
     f80:	fd 85       	ldd	r31, Y+13	; 0x0d
     f82:	80 81       	ld	r24, Z
     f84:	8b 32       	cpi	r24, 0x2B	; 43
     f86:	29 f0       	breq	.+10     	; 0xf92 <evaluateExpression+0x80>
     f88:	ec 85       	ldd	r30, Y+12	; 0x0c
     f8a:	fd 85       	ldd	r31, Y+13	; 0x0d
     f8c:	80 81       	ld	r24, Z
     f8e:	8d 32       	cpi	r24, 0x2D	; 45
     f90:	39 f5       	brne	.+78     	; 0xfe0 <evaluateExpression+0xce>
			result += sign * num;
     f92:	2e 81       	ldd	r18, Y+6	; 0x06
     f94:	3f 81       	ldd	r19, Y+7	; 0x07
     f96:	88 85       	ldd	r24, Y+8	; 0x08
     f98:	99 85       	ldd	r25, Y+9	; 0x09
     f9a:	a9 01       	movw	r20, r18
     f9c:	48 9f       	mul	r20, r24
     f9e:	90 01       	movw	r18, r0
     fa0:	49 9f       	mul	r20, r25
     fa2:	30 0d       	add	r19, r0
     fa4:	58 9f       	mul	r21, r24
     fa6:	30 0d       	add	r19, r0
     fa8:	11 24       	eor	r1, r1
     faa:	8a 85       	ldd	r24, Y+10	; 0x0a
     fac:	9b 85       	ldd	r25, Y+11	; 0x0b
     fae:	82 0f       	add	r24, r18
     fb0:	93 1f       	adc	r25, r19
     fb2:	9b 87       	std	Y+11, r25	; 0x0b
     fb4:	8a 87       	std	Y+10, r24	; 0x0a
			num = 0;
     fb6:	19 86       	std	Y+9, r1	; 0x09
     fb8:	18 86       	std	Y+8, r1	; 0x08
			sign = (*expression == '+') ? 1 : -1;
     fba:	ec 85       	ldd	r30, Y+12	; 0x0c
     fbc:	fd 85       	ldd	r31, Y+13	; 0x0d
     fbe:	80 81       	ld	r24, Z
     fc0:	8b 32       	cpi	r24, 0x2B	; 43
     fc2:	29 f4       	brne	.+10     	; 0xfce <evaluateExpression+0xbc>
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	9a 8b       	std	Y+18, r25	; 0x12
     fca:	89 8b       	std	Y+17, r24	; 0x11
     fcc:	04 c0       	rjmp	.+8      	; 0xfd6 <evaluateExpression+0xc4>
     fce:	4f ef       	ldi	r20, 0xFF	; 255
     fd0:	5f ef       	ldi	r21, 0xFF	; 255
     fd2:	5a 8b       	std	Y+18, r21	; 0x12
     fd4:	49 8b       	std	Y+17, r20	; 0x11
     fd6:	89 89       	ldd	r24, Y+17	; 0x11
     fd8:	9a 89       	ldd	r25, Y+18	; 0x12
     fda:	9f 83       	std	Y+7, r25	; 0x07
     fdc:	8e 83       	std	Y+6, r24	; 0x06
     fde:	9c c0       	rjmp	.+312    	; 0x1118 <evaluateExpression+0x206>
		} else if (*expression == '*' || *expression == '/') {
     fe0:	ec 85       	ldd	r30, Y+12	; 0x0c
     fe2:	fd 85       	ldd	r31, Y+13	; 0x0d
     fe4:	80 81       	ld	r24, Z
     fe6:	8a 32       	cpi	r24, 0x2A	; 42
     fe8:	31 f0       	breq	.+12     	; 0xff6 <evaluateExpression+0xe4>
     fea:	ec 85       	ldd	r30, Y+12	; 0x0c
     fec:	fd 85       	ldd	r31, Y+13	; 0x0d
     fee:	80 81       	ld	r24, Z
     ff0:	8f 32       	cpi	r24, 0x2F	; 47
     ff2:	09 f0       	breq	.+2      	; 0xff6 <evaluateExpression+0xe4>
     ff4:	91 c0       	rjmp	.+290    	; 0x1118 <evaluateExpression+0x206>
			char operator = *expression;
     ff6:	ec 85       	ldd	r30, Y+12	; 0x0c
     ff8:	fd 85       	ldd	r31, Y+13	; 0x0d
     ffa:	80 81       	ld	r24, Z
     ffc:	8d 83       	std	Y+5, r24	; 0x05
			expression++;  					// Move to the next character
     ffe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1000:	9d 85       	ldd	r25, Y+13	; 0x0d
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	9d 87       	std	Y+13, r25	; 0x0d
    1006:	8c 87       	std	Y+12, r24	; 0x0c
			exp_length--;
    1008:	8e 85       	ldd	r24, Y+14	; 0x0e
    100a:	81 50       	subi	r24, 0x01	; 1
    100c:	8e 87       	std	Y+14, r24	; 0x0e

			int nextNum = 0;
    100e:	1c 82       	std	Y+4, r1	; 0x04
    1010:	1b 82       	std	Y+3, r1	; 0x03
			int nextSign = 1;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	9a 83       	std	Y+2, r25	; 0x02
    1018:	89 83       	std	Y+1, r24	; 0x01
			if (*expression == '-') {
    101a:	ec 85       	ldd	r30, Y+12	; 0x0c
    101c:	fd 85       	ldd	r31, Y+13	; 0x0d
    101e:	80 81       	ld	r24, Z
    1020:	8d 32       	cpi	r24, 0x2D	; 45
    1022:	59 f5       	brne	.+86     	; 0x107a <evaluateExpression+0x168>
				nextSign = -1;
    1024:	8f ef       	ldi	r24, 0xFF	; 255
    1026:	9f ef       	ldi	r25, 0xFF	; 255
    1028:	9a 83       	std	Y+2, r25	; 0x02
    102a:	89 83       	std	Y+1, r24	; 0x01
				expression++;
    102c:	8c 85       	ldd	r24, Y+12	; 0x0c
    102e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1030:	01 96       	adiw	r24, 0x01	; 1
    1032:	9d 87       	std	Y+13, r25	; 0x0d
    1034:	8c 87       	std	Y+12, r24	; 0x0c
				exp_length--;
    1036:	8e 85       	ldd	r24, Y+14	; 0x0e
    1038:	81 50       	subi	r24, 0x01	; 1
    103a:	8e 87       	std	Y+14, r24	; 0x0e
    103c:	1e c0       	rjmp	.+60     	; 0x107a <evaluateExpression+0x168>
			}
			while (isdigit(*expression) && exp_length) {
				nextNum = nextNum * 10 + (*expression - '0');
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	9c 81       	ldd	r25, Y+4	; 0x04
    1042:	9c 01       	movw	r18, r24
    1044:	22 0f       	add	r18, r18
    1046:	33 1f       	adc	r19, r19
    1048:	c9 01       	movw	r24, r18
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	28 0f       	add	r18, r24
    1054:	39 1f       	adc	r19, r25
    1056:	ec 85       	ldd	r30, Y+12	; 0x0c
    1058:	fd 85       	ldd	r31, Y+13	; 0x0d
    105a:	80 81       	ld	r24, Z
    105c:	88 2f       	mov	r24, r24
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	c0 97       	sbiw	r24, 0x30	; 48
    1062:	82 0f       	add	r24, r18
    1064:	93 1f       	adc	r25, r19
    1066:	9c 83       	std	Y+4, r25	; 0x04
    1068:	8b 83       	std	Y+3, r24	; 0x03
				expression++;
    106a:	8c 85       	ldd	r24, Y+12	; 0x0c
    106c:	9d 85       	ldd	r25, Y+13	; 0x0d
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	9d 87       	std	Y+13, r25	; 0x0d
    1072:	8c 87       	std	Y+12, r24	; 0x0c
				exp_length--;
    1074:	8e 85       	ldd	r24, Y+14	; 0x0e
    1076:	81 50       	subi	r24, 0x01	; 1
    1078:	8e 87       	std	Y+14, r24	; 0x0e
			if (*expression == '-') {
				nextSign = -1;
				expression++;
				exp_length--;
			}
			while (isdigit(*expression) && exp_length) {
    107a:	ec 85       	ldd	r30, Y+12	; 0x0c
    107c:	fd 85       	ldd	r31, Y+13	; 0x0d
    107e:	80 81       	ld	r24, Z
    1080:	88 2f       	mov	r24, r24
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	c0 97       	sbiw	r24, 0x30	; 48
    1086:	8a 30       	cpi	r24, 0x0A	; 10
    1088:	91 05       	cpc	r25, r1
    108a:	18 f4       	brcc	.+6      	; 0x1092 <evaluateExpression+0x180>
    108c:	8e 85       	ldd	r24, Y+14	; 0x0e
    108e:	88 23       	and	r24, r24
    1090:	b1 f6       	brne	.-84     	; 0x103e <evaluateExpression+0x12c>
				nextNum = nextNum * 10 + (*expression - '0');
				expression++;
				exp_length--;
			}
			if (operator == '*') {
    1092:	8d 81       	ldd	r24, Y+5	; 0x05
    1094:	8a 32       	cpi	r24, 0x2A	; 42
    1096:	c9 f4       	brne	.+50     	; 0x10ca <evaluateExpression+0x1b8>
				num *= nextSign * nextNum;
    1098:	29 81       	ldd	r18, Y+1	; 0x01
    109a:	3a 81       	ldd	r19, Y+2	; 0x02
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	9c 81       	ldd	r25, Y+4	; 0x04
    10a0:	a9 01       	movw	r20, r18
    10a2:	48 9f       	mul	r20, r24
    10a4:	90 01       	movw	r18, r0
    10a6:	49 9f       	mul	r20, r25
    10a8:	30 0d       	add	r19, r0
    10aa:	58 9f       	mul	r21, r24
    10ac:	30 0d       	add	r19, r0
    10ae:	11 24       	eor	r1, r1
    10b0:	88 85       	ldd	r24, Y+8	; 0x08
    10b2:	99 85       	ldd	r25, Y+9	; 0x09
    10b4:	ac 01       	movw	r20, r24
    10b6:	42 9f       	mul	r20, r18
    10b8:	c0 01       	movw	r24, r0
    10ba:	43 9f       	mul	r20, r19
    10bc:	90 0d       	add	r25, r0
    10be:	52 9f       	mul	r21, r18
    10c0:	90 0d       	add	r25, r0
    10c2:	11 24       	eor	r1, r1
    10c4:	99 87       	std	Y+9, r25	; 0x09
    10c6:	88 87       	std	Y+8, r24	; 0x08
    10c8:	2f c0       	rjmp	.+94     	; 0x1128 <evaluateExpression+0x216>
			} else if (operator == '/') {
    10ca:	8d 81       	ldd	r24, Y+5	; 0x05
    10cc:	8f 32       	cpi	r24, 0x2F	; 47
    10ce:	61 f5       	brne	.+88     	; 0x1128 <evaluateExpression+0x216>
				if (nextNum != 0) {
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	a9 f0       	breq	.+42     	; 0x1102 <evaluateExpression+0x1f0>
					num /= nextSign * nextNum;
    10d8:	29 81       	ldd	r18, Y+1	; 0x01
    10da:	3a 81       	ldd	r19, Y+2	; 0x02
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	a9 01       	movw	r20, r18
    10e2:	48 9f       	mul	r20, r24
    10e4:	90 01       	movw	r18, r0
    10e6:	49 9f       	mul	r20, r25
    10e8:	30 0d       	add	r19, r0
    10ea:	58 9f       	mul	r21, r24
    10ec:	30 0d       	add	r19, r0
    10ee:	11 24       	eor	r1, r1
    10f0:	88 85       	ldd	r24, Y+8	; 0x08
    10f2:	99 85       	ldd	r25, Y+9	; 0x09
    10f4:	b9 01       	movw	r22, r18
    10f6:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <__divmodhi4>
    10fa:	cb 01       	movw	r24, r22
    10fc:	99 87       	std	Y+9, r25	; 0x09
    10fe:	88 87       	std	Y+8, r24	; 0x08
    1100:	13 c0       	rjmp	.+38     	; 0x1128 <evaluateExpression+0x216>
				} else {
					// Handle division by zero error
					LCD_moveCursor(1, 0);
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_moveCursor>
					LCD_displayString("Error: Division by zero\n");
    110a:	84 e8       	ldi	r24, 0x84	; 132
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 38 17 	call	0x2e70	; 0x2e70 <LCD_displayString>
					return 0;
    1112:	18 8a       	std	Y+16, r1	; 0x10
    1114:	1f 86       	std	Y+15, r1	; 0x0f
    1116:	27 c0       	rjmp	.+78     	; 0x1166 <evaluateExpression+0x254>
				}
			}
			continue;
		}
		expression++;
    1118:	8c 85       	ldd	r24, Y+12	; 0x0c
    111a:	9d 85       	ldd	r25, Y+13	; 0x0d
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	9d 87       	std	Y+13, r25	; 0x0d
    1120:	8c 87       	std	Y+12, r24	; 0x0c
		exp_length--;
    1122:	8e 85       	ldd	r24, Y+14	; 0x0e
    1124:	81 50       	subi	r24, 0x01	; 1
    1126:	8e 87       	std	Y+14, r24	; 0x0e
int evaluateExpression(const char *expression, uint8 exp_length){
	int result = 0;
	int num = 0;
	int sign = 1;

	while (*expression && exp_length) {
    1128:	ec 85       	ldd	r30, Y+12	; 0x0c
    112a:	fd 85       	ldd	r31, Y+13	; 0x0d
    112c:	80 81       	ld	r24, Z
    112e:	88 23       	and	r24, r24
    1130:	21 f0       	breq	.+8      	; 0x113a <evaluateExpression+0x228>
    1132:	8e 85       	ldd	r24, Y+14	; 0x0e
    1134:	88 23       	and	r24, r24
    1136:	09 f0       	breq	.+2      	; 0x113a <evaluateExpression+0x228>
    1138:	02 cf       	rjmp	.-508    	; 0xf3e <evaluateExpression+0x2c>
		expression++;
		exp_length--;
	}

	// Handle the last number and operator
	result += sign * num;
    113a:	2e 81       	ldd	r18, Y+6	; 0x06
    113c:	3f 81       	ldd	r19, Y+7	; 0x07
    113e:	88 85       	ldd	r24, Y+8	; 0x08
    1140:	99 85       	ldd	r25, Y+9	; 0x09
    1142:	a9 01       	movw	r20, r18
    1144:	48 9f       	mul	r20, r24
    1146:	90 01       	movw	r18, r0
    1148:	49 9f       	mul	r20, r25
    114a:	30 0d       	add	r19, r0
    114c:	58 9f       	mul	r21, r24
    114e:	30 0d       	add	r19, r0
    1150:	11 24       	eor	r1, r1
    1152:	8a 85       	ldd	r24, Y+10	; 0x0a
    1154:	9b 85       	ldd	r25, Y+11	; 0x0b
    1156:	82 0f       	add	r24, r18
    1158:	93 1f       	adc	r25, r19
    115a:	9b 87       	std	Y+11, r25	; 0x0b
    115c:	8a 87       	std	Y+10, r24	; 0x0a

	return result;
    115e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1160:	9b 85       	ldd	r25, Y+11	; 0x0b
    1162:	98 8b       	std	Y+16, r25	; 0x10
    1164:	8f 87       	std	Y+15, r24	; 0x0f
    1166:	8f 85       	ldd	r24, Y+15	; 0x0f
    1168:	98 89       	ldd	r25, Y+16	; 0x10
}
    116a:	62 96       	adiw	r28, 0x12	; 18
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	cd bf       	out	0x3d, r28	; 61
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	00 d0       	rcall	.+0      	; 0x1182 <GPIO_setupPinDirection+0x6>
    1182:	00 d0       	rcall	.+0      	; 0x1184 <GPIO_setupPinDirection+0x8>
    1184:	0f 92       	push	r0
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	6a 83       	std	Y+2, r22	; 0x02
    118e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	88 30       	cpi	r24, 0x08	; 8
    1194:	08 f0       	brcs	.+2      	; 0x1198 <GPIO_setupPinDirection+0x1c>
    1196:	d5 c0       	rjmp	.+426    	; 0x1342 <GPIO_setupPinDirection+0x1c6>
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	84 30       	cpi	r24, 0x04	; 4
    119c:	08 f0       	brcs	.+2      	; 0x11a0 <GPIO_setupPinDirection+0x24>
    119e:	d1 c0       	rjmp	.+418    	; 0x1342 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	3d 83       	std	Y+5, r19	; 0x05
    11a8:	2c 83       	std	Y+4, r18	; 0x04
    11aa:	8c 81       	ldd	r24, Y+4	; 0x04
    11ac:	9d 81       	ldd	r25, Y+5	; 0x05
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	91 05       	cpc	r25, r1
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <GPIO_setupPinDirection+0x3a>
    11b4:	43 c0       	rjmp	.+134    	; 0x123c <GPIO_setupPinDirection+0xc0>
    11b6:	2c 81       	ldd	r18, Y+4	; 0x04
    11b8:	3d 81       	ldd	r19, Y+5	; 0x05
    11ba:	22 30       	cpi	r18, 0x02	; 2
    11bc:	31 05       	cpc	r19, r1
    11be:	2c f4       	brge	.+10     	; 0x11ca <GPIO_setupPinDirection+0x4e>
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	9d 81       	ldd	r25, Y+5	; 0x05
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	71 f0       	breq	.+28     	; 0x11e4 <GPIO_setupPinDirection+0x68>
    11c8:	bc c0       	rjmp	.+376    	; 0x1342 <GPIO_setupPinDirection+0x1c6>
    11ca:	2c 81       	ldd	r18, Y+4	; 0x04
    11cc:	3d 81       	ldd	r19, Y+5	; 0x05
    11ce:	22 30       	cpi	r18, 0x02	; 2
    11d0:	31 05       	cpc	r19, r1
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <GPIO_setupPinDirection+0x5a>
    11d4:	5f c0       	rjmp	.+190    	; 0x1294 <GPIO_setupPinDirection+0x118>
    11d6:	8c 81       	ldd	r24, Y+4	; 0x04
    11d8:	9d 81       	ldd	r25, Y+5	; 0x05
    11da:	83 30       	cpi	r24, 0x03	; 3
    11dc:	91 05       	cpc	r25, r1
    11de:	09 f4       	brne	.+2      	; 0x11e2 <GPIO_setupPinDirection+0x66>
    11e0:	85 c0       	rjmp	.+266    	; 0x12ec <GPIO_setupPinDirection+0x170>
    11e2:	af c0       	rjmp	.+350    	; 0x1342 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	a1 f4       	brne	.+40     	; 0x1212 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    11ea:	aa e3       	ldi	r26, 0x3A	; 58
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	ea e3       	ldi	r30, 0x3A	; 58
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	48 2f       	mov	r20, r24
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	02 2e       	mov	r0, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <GPIO_setupPinDirection+0x8c>
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	0a 94       	dec	r0
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <GPIO_setupPinDirection+0x88>
    120c:	84 2b       	or	r24, r20
    120e:	8c 93       	st	X, r24
    1210:	98 c0       	rjmp	.+304    	; 0x1342 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1212:	aa e3       	ldi	r26, 0x3A	; 58
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	ea e3       	ldi	r30, 0x3A	; 58
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 2e       	mov	r0, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <GPIO_setupPinDirection+0xb4>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <GPIO_setupPinDirection+0xb0>
    1234:	80 95       	com	r24
    1236:	84 23       	and	r24, r20
    1238:	8c 93       	st	X, r24
    123a:	83 c0       	rjmp	.+262    	; 0x1342 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	a1 f4       	brne	.+40     	; 0x126a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1242:	a7 e3       	ldi	r26, 0x37	; 55
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e7 e3       	ldi	r30, 0x37	; 55
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	48 2f       	mov	r20, r24
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	02 2e       	mov	r0, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <GPIO_setupPinDirection+0xe4>
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	0a 94       	dec	r0
    1262:	e2 f7       	brpl	.-8      	; 0x125c <GPIO_setupPinDirection+0xe0>
    1264:	84 2b       	or	r24, r20
    1266:	8c 93       	st	X, r24
    1268:	6c c0       	rjmp	.+216    	; 0x1342 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    126a:	a7 e3       	ldi	r26, 0x37	; 55
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e7 e3       	ldi	r30, 0x37	; 55
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <GPIO_setupPinDirection+0x10c>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <GPIO_setupPinDirection+0x108>
    128c:	80 95       	com	r24
    128e:	84 23       	and	r24, r20
    1290:	8c 93       	st	X, r24
    1292:	57 c0       	rjmp	.+174    	; 0x1342 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	a1 f4       	brne	.+40     	; 0x12c2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    129a:	a4 e3       	ldi	r26, 0x34	; 52
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e4 e3       	ldi	r30, 0x34	; 52
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	48 2f       	mov	r20, r24
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 2e       	mov	r0, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <GPIO_setupPinDirection+0x13c>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <GPIO_setupPinDirection+0x138>
    12bc:	84 2b       	or	r24, r20
    12be:	8c 93       	st	X, r24
    12c0:	40 c0       	rjmp	.+128    	; 0x1342 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    12c2:	a4 e3       	ldi	r26, 0x34	; 52
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e4 e3       	ldi	r30, 0x34	; 52
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	48 2f       	mov	r20, r24
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	02 2e       	mov	r0, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <GPIO_setupPinDirection+0x164>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	0a 94       	dec	r0
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <GPIO_setupPinDirection+0x160>
    12e4:	80 95       	com	r24
    12e6:	84 23       	and	r24, r20
    12e8:	8c 93       	st	X, r24
    12ea:	2b c0       	rjmp	.+86     	; 0x1342 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	a1 f4       	brne	.+40     	; 0x131a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    12f2:	a1 e3       	ldi	r26, 0x31	; 49
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e1 e3       	ldi	r30, 0x31	; 49
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 2e       	mov	r0, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <GPIO_setupPinDirection+0x194>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <GPIO_setupPinDirection+0x190>
    1314:	84 2b       	or	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	14 c0       	rjmp	.+40     	; 0x1342 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    131a:	a1 e3       	ldi	r26, 0x31	; 49
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e1 e3       	ldi	r30, 0x31	; 49
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <GPIO_setupPinDirection+0x1bc>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <GPIO_setupPinDirection+0x1b8>
    133c:	80 95       	com	r24
    133e:	84 23       	and	r24, r20
    1340:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	08 95       	ret

00001352 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	00 d0       	rcall	.+0      	; 0x1358 <GPIO_writePin+0x6>
    1358:	00 d0       	rcall	.+0      	; 0x135a <GPIO_writePin+0x8>
    135a:	0f 92       	push	r0
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	6a 83       	std	Y+2, r22	; 0x02
    1364:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	88 30       	cpi	r24, 0x08	; 8
    136a:	08 f0       	brcs	.+2      	; 0x136e <GPIO_writePin+0x1c>
    136c:	d5 c0       	rjmp	.+426    	; 0x1518 <GPIO_writePin+0x1c6>
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	84 30       	cpi	r24, 0x04	; 4
    1372:	08 f0       	brcs	.+2      	; 0x1376 <GPIO_writePin+0x24>
    1374:	d1 c0       	rjmp	.+418    	; 0x1518 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	3d 83       	std	Y+5, r19	; 0x05
    137e:	2c 83       	std	Y+4, r18	; 0x04
    1380:	8c 81       	ldd	r24, Y+4	; 0x04
    1382:	9d 81       	ldd	r25, Y+5	; 0x05
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	91 05       	cpc	r25, r1
    1388:	09 f4       	brne	.+2      	; 0x138c <GPIO_writePin+0x3a>
    138a:	43 c0       	rjmp	.+134    	; 0x1412 <GPIO_writePin+0xc0>
    138c:	2c 81       	ldd	r18, Y+4	; 0x04
    138e:	3d 81       	ldd	r19, Y+5	; 0x05
    1390:	22 30       	cpi	r18, 0x02	; 2
    1392:	31 05       	cpc	r19, r1
    1394:	2c f4       	brge	.+10     	; 0x13a0 <GPIO_writePin+0x4e>
    1396:	8c 81       	ldd	r24, Y+4	; 0x04
    1398:	9d 81       	ldd	r25, Y+5	; 0x05
    139a:	00 97       	sbiw	r24, 0x00	; 0
    139c:	71 f0       	breq	.+28     	; 0x13ba <GPIO_writePin+0x68>
    139e:	bc c0       	rjmp	.+376    	; 0x1518 <GPIO_writePin+0x1c6>
    13a0:	2c 81       	ldd	r18, Y+4	; 0x04
    13a2:	3d 81       	ldd	r19, Y+5	; 0x05
    13a4:	22 30       	cpi	r18, 0x02	; 2
    13a6:	31 05       	cpc	r19, r1
    13a8:	09 f4       	brne	.+2      	; 0x13ac <GPIO_writePin+0x5a>
    13aa:	5f c0       	rjmp	.+190    	; 0x146a <GPIO_writePin+0x118>
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	9d 81       	ldd	r25, Y+5	; 0x05
    13b0:	83 30       	cpi	r24, 0x03	; 3
    13b2:	91 05       	cpc	r25, r1
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <GPIO_writePin+0x66>
    13b6:	85 c0       	rjmp	.+266    	; 0x14c2 <GPIO_writePin+0x170>
    13b8:	af c0       	rjmp	.+350    	; 0x1518 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	a1 f4       	brne	.+40     	; 0x13e8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    13c0:	ab e3       	ldi	r26, 0x3B	; 59
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	eb e3       	ldi	r30, 0x3B	; 59
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 2e       	mov	r0, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <GPIO_writePin+0x8c>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <GPIO_writePin+0x88>
    13e2:	84 2b       	or	r24, r20
    13e4:	8c 93       	st	X, r24
    13e6:	98 c0       	rjmp	.+304    	; 0x1518 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    13e8:	ab e3       	ldi	r26, 0x3B	; 59
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	eb e3       	ldi	r30, 0x3B	; 59
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 2e       	mov	r0, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <GPIO_writePin+0xb4>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <GPIO_writePin+0xb0>
    140a:	80 95       	com	r24
    140c:	84 23       	and	r24, r20
    140e:	8c 93       	st	X, r24
    1410:	83 c0       	rjmp	.+262    	; 0x1518 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	a1 f4       	brne	.+40     	; 0x1440 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1418:	a8 e3       	ldi	r26, 0x38	; 56
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e8 e3       	ldi	r30, 0x38	; 56
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <GPIO_writePin+0xe4>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <GPIO_writePin+0xe0>
    143a:	84 2b       	or	r24, r20
    143c:	8c 93       	st	X, r24
    143e:	6c c0       	rjmp	.+216    	; 0x1518 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1440:	a8 e3       	ldi	r26, 0x38	; 56
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e8 e3       	ldi	r30, 0x38	; 56
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 2e       	mov	r0, r18
    1458:	02 c0       	rjmp	.+4      	; 0x145e <GPIO_writePin+0x10c>
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	0a 94       	dec	r0
    1460:	e2 f7       	brpl	.-8      	; 0x145a <GPIO_writePin+0x108>
    1462:	80 95       	com	r24
    1464:	84 23       	and	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	57 c0       	rjmp	.+174    	; 0x1518 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	81 30       	cpi	r24, 0x01	; 1
    146e:	a1 f4       	brne	.+40     	; 0x1498 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1470:	a5 e3       	ldi	r26, 0x35	; 53
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	e5 e3       	ldi	r30, 0x35	; 53
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	48 2f       	mov	r20, r24
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	02 2e       	mov	r0, r18
    1488:	02 c0       	rjmp	.+4      	; 0x148e <GPIO_writePin+0x13c>
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	0a 94       	dec	r0
    1490:	e2 f7       	brpl	.-8      	; 0x148a <GPIO_writePin+0x138>
    1492:	84 2b       	or	r24, r20
    1494:	8c 93       	st	X, r24
    1496:	40 c0       	rjmp	.+128    	; 0x1518 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1498:	a5 e3       	ldi	r26, 0x35	; 53
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e5 e3       	ldi	r30, 0x35	; 53
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	48 2f       	mov	r20, r24
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	02 2e       	mov	r0, r18
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <GPIO_writePin+0x164>
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	0a 94       	dec	r0
    14b8:	e2 f7       	brpl	.-8      	; 0x14b2 <GPIO_writePin+0x160>
    14ba:	80 95       	com	r24
    14bc:	84 23       	and	r24, r20
    14be:	8c 93       	st	X, r24
    14c0:	2b c0       	rjmp	.+86     	; 0x1518 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	a1 f4       	brne	.+40     	; 0x14f0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    14c8:	a2 e3       	ldi	r26, 0x32	; 50
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e2 e3       	ldi	r30, 0x32	; 50
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	48 2f       	mov	r20, r24
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	02 2e       	mov	r0, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <GPIO_writePin+0x194>
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	0a 94       	dec	r0
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <GPIO_writePin+0x190>
    14ea:	84 2b       	or	r24, r20
    14ec:	8c 93       	st	X, r24
    14ee:	14 c0       	rjmp	.+40     	; 0x1518 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    14f0:	a2 e3       	ldi	r26, 0x32	; 50
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	e2 e3       	ldi	r30, 0x32	; 50
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	48 2f       	mov	r20, r24
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	02 2e       	mov	r0, r18
    1508:	02 c0       	rjmp	.+4      	; 0x150e <GPIO_writePin+0x1bc>
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	0a 94       	dec	r0
    1510:	e2 f7       	brpl	.-8      	; 0x150a <GPIO_writePin+0x1b8>
    1512:	80 95       	com	r24
    1514:	84 23       	and	r24, r20
    1516:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	00 d0       	rcall	.+0      	; 0x152e <GPIO_readPin+0x6>
    152e:	00 d0       	rcall	.+0      	; 0x1530 <GPIO_readPin+0x8>
    1530:	0f 92       	push	r0
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	8a 83       	std	Y+2, r24	; 0x02
    1538:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    153a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	88 30       	cpi	r24, 0x08	; 8
    1540:	08 f0       	brcs	.+2      	; 0x1544 <GPIO_readPin+0x1c>
    1542:	84 c0       	rjmp	.+264    	; 0x164c <GPIO_readPin+0x124>
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	84 30       	cpi	r24, 0x04	; 4
    1548:	08 f0       	brcs	.+2      	; 0x154c <GPIO_readPin+0x24>
    154a:	80 c0       	rjmp	.+256    	; 0x164c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	3d 83       	std	Y+5, r19	; 0x05
    1554:	2c 83       	std	Y+4, r18	; 0x04
    1556:	4c 81       	ldd	r20, Y+4	; 0x04
    1558:	5d 81       	ldd	r21, Y+5	; 0x05
    155a:	41 30       	cpi	r20, 0x01	; 1
    155c:	51 05       	cpc	r21, r1
    155e:	79 f1       	breq	.+94     	; 0x15be <GPIO_readPin+0x96>
    1560:	8c 81       	ldd	r24, Y+4	; 0x04
    1562:	9d 81       	ldd	r25, Y+5	; 0x05
    1564:	82 30       	cpi	r24, 0x02	; 2
    1566:	91 05       	cpc	r25, r1
    1568:	34 f4       	brge	.+12     	; 0x1576 <GPIO_readPin+0x4e>
    156a:	2c 81       	ldd	r18, Y+4	; 0x04
    156c:	3d 81       	ldd	r19, Y+5	; 0x05
    156e:	21 15       	cp	r18, r1
    1570:	31 05       	cpc	r19, r1
    1572:	69 f0       	breq	.+26     	; 0x158e <GPIO_readPin+0x66>
    1574:	6b c0       	rjmp	.+214    	; 0x164c <GPIO_readPin+0x124>
    1576:	4c 81       	ldd	r20, Y+4	; 0x04
    1578:	5d 81       	ldd	r21, Y+5	; 0x05
    157a:	42 30       	cpi	r20, 0x02	; 2
    157c:	51 05       	cpc	r21, r1
    157e:	b9 f1       	breq	.+110    	; 0x15ee <GPIO_readPin+0xc6>
    1580:	8c 81       	ldd	r24, Y+4	; 0x04
    1582:	9d 81       	ldd	r25, Y+5	; 0x05
    1584:	83 30       	cpi	r24, 0x03	; 3
    1586:	91 05       	cpc	r25, r1
    1588:	09 f4       	brne	.+2      	; 0x158c <GPIO_readPin+0x64>
    158a:	49 c0       	rjmp	.+146    	; 0x161e <GPIO_readPin+0xf6>
    158c:	5f c0       	rjmp	.+190    	; 0x164c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    158e:	e9 e3       	ldi	r30, 0x39	; 57
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	88 2f       	mov	r24, r24
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	a9 01       	movw	r20, r18
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <GPIO_readPin+0x7e>
    15a2:	55 95       	asr	r21
    15a4:	47 95       	ror	r20
    15a6:	8a 95       	dec	r24
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <GPIO_readPin+0x7a>
    15aa:	ca 01       	movw	r24, r20
    15ac:	81 70       	andi	r24, 0x01	; 1
    15ae:	90 70       	andi	r25, 0x00	; 0
    15b0:	88 23       	and	r24, r24
    15b2:	19 f0       	breq	.+6      	; 0x15ba <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	49 c0       	rjmp	.+146    	; 0x164c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15ba:	19 82       	std	Y+1, r1	; 0x01
    15bc:	47 c0       	rjmp	.+142    	; 0x164c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    15be:	e6 e3       	ldi	r30, 0x36	; 54
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	88 2f       	mov	r24, r24
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	a9 01       	movw	r20, r18
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <GPIO_readPin+0xae>
    15d2:	55 95       	asr	r21
    15d4:	47 95       	ror	r20
    15d6:	8a 95       	dec	r24
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <GPIO_readPin+0xaa>
    15da:	ca 01       	movw	r24, r20
    15dc:	81 70       	andi	r24, 0x01	; 1
    15de:	90 70       	andi	r25, 0x00	; 0
    15e0:	88 23       	and	r24, r24
    15e2:	19 f0       	breq	.+6      	; 0x15ea <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	89 83       	std	Y+1, r24	; 0x01
    15e8:	31 c0       	rjmp	.+98     	; 0x164c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15ea:	19 82       	std	Y+1, r1	; 0x01
    15ec:	2f c0       	rjmp	.+94     	; 0x164c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    15ee:	e3 e3       	ldi	r30, 0x33	; 51
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	88 2f       	mov	r24, r24
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	a9 01       	movw	r20, r18
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <GPIO_readPin+0xde>
    1602:	55 95       	asr	r21
    1604:	47 95       	ror	r20
    1606:	8a 95       	dec	r24
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <GPIO_readPin+0xda>
    160a:	ca 01       	movw	r24, r20
    160c:	81 70       	andi	r24, 0x01	; 1
    160e:	90 70       	andi	r25, 0x00	; 0
    1610:	88 23       	and	r24, r24
    1612:	19 f0       	breq	.+6      	; 0x161a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	19 c0       	rjmp	.+50     	; 0x164c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    161a:	19 82       	std	Y+1, r1	; 0x01
    161c:	17 c0       	rjmp	.+46     	; 0x164c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    161e:	e0 e3       	ldi	r30, 0x30	; 48
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	88 2f       	mov	r24, r24
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	a9 01       	movw	r20, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <GPIO_readPin+0x10e>
    1632:	55 95       	asr	r21
    1634:	47 95       	ror	r20
    1636:	8a 95       	dec	r24
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <GPIO_readPin+0x10a>
    163a:	ca 01       	movw	r24, r20
    163c:	81 70       	andi	r24, 0x01	; 1
    163e:	90 70       	andi	r25, 0x00	; 0
    1640:	88 23       	and	r24, r24
    1642:	19 f0       	breq	.+6      	; 0x164a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	89 83       	std	Y+1, r24	; 0x01
    1648:	01 c0       	rjmp	.+2      	; 0x164c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    164a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    164c:	89 81       	ldd	r24, Y+1	; 0x01
}
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	00 d0       	rcall	.+0      	; 0x1664 <GPIO_setupPortDirection+0x6>
    1664:	00 d0       	rcall	.+0      	; 0x1666 <GPIO_setupPortDirection+0x8>
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	89 83       	std	Y+1, r24	; 0x01
    166c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	84 30       	cpi	r24, 0x04	; 4
    1672:	90 f5       	brcc	.+100    	; 0x16d8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	3c 83       	std	Y+4, r19	; 0x04
    167c:	2b 83       	std	Y+3, r18	; 0x03
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	9c 81       	ldd	r25, Y+4	; 0x04
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	91 05       	cpc	r25, r1
    1686:	d1 f0       	breq	.+52     	; 0x16bc <GPIO_setupPortDirection+0x5e>
    1688:	2b 81       	ldd	r18, Y+3	; 0x03
    168a:	3c 81       	ldd	r19, Y+4	; 0x04
    168c:	22 30       	cpi	r18, 0x02	; 2
    168e:	31 05       	cpc	r19, r1
    1690:	2c f4       	brge	.+10     	; 0x169c <GPIO_setupPortDirection+0x3e>
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	9c 81       	ldd	r25, Y+4	; 0x04
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	61 f0       	breq	.+24     	; 0x16b2 <GPIO_setupPortDirection+0x54>
    169a:	1e c0       	rjmp	.+60     	; 0x16d8 <GPIO_setupPortDirection+0x7a>
    169c:	2b 81       	ldd	r18, Y+3	; 0x03
    169e:	3c 81       	ldd	r19, Y+4	; 0x04
    16a0:	22 30       	cpi	r18, 0x02	; 2
    16a2:	31 05       	cpc	r19, r1
    16a4:	81 f0       	breq	.+32     	; 0x16c6 <GPIO_setupPortDirection+0x68>
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	9c 81       	ldd	r25, Y+4	; 0x04
    16aa:	83 30       	cpi	r24, 0x03	; 3
    16ac:	91 05       	cpc	r25, r1
    16ae:	81 f0       	breq	.+32     	; 0x16d0 <GPIO_setupPortDirection+0x72>
    16b0:	13 c0       	rjmp	.+38     	; 0x16d8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    16b2:	ea e3       	ldi	r30, 0x3A	; 58
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	80 83       	st	Z, r24
    16ba:	0e c0       	rjmp	.+28     	; 0x16d8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    16bc:	e7 e3       	ldi	r30, 0x37	; 55
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	80 83       	st	Z, r24
    16c4:	09 c0       	rjmp	.+18     	; 0x16d8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    16c6:	e4 e3       	ldi	r30, 0x34	; 52
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	80 83       	st	Z, r24
    16ce:	04 c0       	rjmp	.+8      	; 0x16d8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    16d0:	e1 e3       	ldi	r30, 0x31	; 49
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	80 83       	st	Z, r24
			break;
		}
	}
}
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <GPIO_writePort+0x6>
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <GPIO_writePort+0x8>
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	84 30       	cpi	r24, 0x04	; 4
    16fa:	90 f5       	brcc	.+100    	; 0x1760 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	3c 83       	std	Y+4, r19	; 0x04
    1704:	2b 83       	std	Y+3, r18	; 0x03
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	91 05       	cpc	r25, r1
    170e:	d1 f0       	breq	.+52     	; 0x1744 <GPIO_writePort+0x5e>
    1710:	2b 81       	ldd	r18, Y+3	; 0x03
    1712:	3c 81       	ldd	r19, Y+4	; 0x04
    1714:	22 30       	cpi	r18, 0x02	; 2
    1716:	31 05       	cpc	r19, r1
    1718:	2c f4       	brge	.+10     	; 0x1724 <GPIO_writePort+0x3e>
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	9c 81       	ldd	r25, Y+4	; 0x04
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	61 f0       	breq	.+24     	; 0x173a <GPIO_writePort+0x54>
    1722:	1e c0       	rjmp	.+60     	; 0x1760 <GPIO_writePort+0x7a>
    1724:	2b 81       	ldd	r18, Y+3	; 0x03
    1726:	3c 81       	ldd	r19, Y+4	; 0x04
    1728:	22 30       	cpi	r18, 0x02	; 2
    172a:	31 05       	cpc	r19, r1
    172c:	81 f0       	breq	.+32     	; 0x174e <GPIO_writePort+0x68>
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	9c 81       	ldd	r25, Y+4	; 0x04
    1732:	83 30       	cpi	r24, 0x03	; 3
    1734:	91 05       	cpc	r25, r1
    1736:	81 f0       	breq	.+32     	; 0x1758 <GPIO_writePort+0x72>
    1738:	13 c0       	rjmp	.+38     	; 0x1760 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    173a:	eb e3       	ldi	r30, 0x3B	; 59
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	80 83       	st	Z, r24
    1742:	0e c0       	rjmp	.+28     	; 0x1760 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1744:	e8 e3       	ldi	r30, 0x38	; 56
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	80 83       	st	Z, r24
    174c:	09 c0       	rjmp	.+18     	; 0x1760 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    174e:	e5 e3       	ldi	r30, 0x35	; 53
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	80 83       	st	Z, r24
    1756:	04 c0       	rjmp	.+8      	; 0x1760 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1758:	e2 e3       	ldi	r30, 0x32	; 50
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	00 d0       	rcall	.+0      	; 0x1774 <GPIO_readPort+0x6>
    1774:	00 d0       	rcall	.+0      	; 0x1776 <GPIO_readPort+0x8>
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    177c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	84 30       	cpi	r24, 0x04	; 4
    1782:	90 f5       	brcc	.+100    	; 0x17e8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	3c 83       	std	Y+4, r19	; 0x04
    178c:	2b 83       	std	Y+3, r18	; 0x03
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	81 30       	cpi	r24, 0x01	; 1
    1794:	91 05       	cpc	r25, r1
    1796:	d1 f0       	breq	.+52     	; 0x17cc <GPIO_readPort+0x5e>
    1798:	2b 81       	ldd	r18, Y+3	; 0x03
    179a:	3c 81       	ldd	r19, Y+4	; 0x04
    179c:	22 30       	cpi	r18, 0x02	; 2
    179e:	31 05       	cpc	r19, r1
    17a0:	2c f4       	brge	.+10     	; 0x17ac <GPIO_readPort+0x3e>
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	9c 81       	ldd	r25, Y+4	; 0x04
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	61 f0       	breq	.+24     	; 0x17c2 <GPIO_readPort+0x54>
    17aa:	1e c0       	rjmp	.+60     	; 0x17e8 <GPIO_readPort+0x7a>
    17ac:	2b 81       	ldd	r18, Y+3	; 0x03
    17ae:	3c 81       	ldd	r19, Y+4	; 0x04
    17b0:	22 30       	cpi	r18, 0x02	; 2
    17b2:	31 05       	cpc	r19, r1
    17b4:	81 f0       	breq	.+32     	; 0x17d6 <GPIO_readPort+0x68>
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ba:	83 30       	cpi	r24, 0x03	; 3
    17bc:	91 05       	cpc	r25, r1
    17be:	81 f0       	breq	.+32     	; 0x17e0 <GPIO_readPort+0x72>
    17c0:	13 c0       	rjmp	.+38     	; 0x17e8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    17c2:	e9 e3       	ldi	r30, 0x39	; 57
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	89 83       	std	Y+1, r24	; 0x01
    17ca:	0e c0       	rjmp	.+28     	; 0x17e8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    17cc:	e6 e3       	ldi	r30, 0x36	; 54
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	09 c0       	rjmp	.+18     	; 0x17e8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    17d6:	e3 e3       	ldi	r30, 0x33	; 51
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	89 83       	std	Y+1, r24	; 0x01
    17de:	04 c0       	rjmp	.+8      	; 0x17e8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    17e0:	e0 e3       	ldi	r30, 0x30	; 48
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	60 97       	sbiw	r28, 0x10	; 16
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	64 e0       	ldi	r22, 0x04	; 4
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	0e 94 be 08 	call	0x117c	; 0x117c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	65 e0       	ldi	r22, 0x05	; 5
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	0e 94 be 08 	call	0x117c	; 0x117c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	66 e0       	ldi	r22, 0x06	; 6
    1824:	40 e0       	ldi	r20, 0x00	; 0
    1826:	0e 94 be 08 	call	0x117c	; 0x117c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	67 e0       	ldi	r22, 0x07	; 7
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	0e 94 be 08 	call	0x117c	; 0x117c <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1834:	83 e0       	ldi	r24, 0x03	; 3
    1836:	62 e0       	ldi	r22, 0x02	; 2
    1838:	40 e0       	ldi	r20, 0x00	; 0
    183a:	0e 94 be 08 	call	0x117c	; 0x117c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    183e:	83 e0       	ldi	r24, 0x03	; 3
    1840:	63 e0       	ldi	r22, 0x03	; 3
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	0e 94 be 08 	call	0x117c	; 0x117c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1848:	83 e0       	ldi	r24, 0x03	; 3
    184a:	64 e0       	ldi	r22, 0x04	; 4
    184c:	40 e0       	ldi	r20, 0x00	; 0
    184e:	0e 94 be 08 	call	0x117c	; 0x117c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1852:	83 e0       	ldi	r24, 0x03	; 3
    1854:	65 e0       	ldi	r22, 0x05	; 5
    1856:	40 e0       	ldi	r20, 0x00	; 0
    1858:	0e 94 be 08 	call	0x117c	; 0x117c <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    185c:	1f 86       	std	Y+15, r1	; 0x0f
    185e:	b4 c0       	rjmp	.+360    	; 0x19c8 <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1860:	8f 85       	ldd	r24, Y+15	; 0x0f
    1862:	98 2f       	mov	r25, r24
    1864:	9c 5f       	subi	r25, 0xFC	; 252
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	69 2f       	mov	r22, r25
    186a:	41 e0       	ldi	r20, 0x01	; 1
    186c:	0e 94 be 08 	call	0x117c	; 0x117c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1870:	8f 85       	ldd	r24, Y+15	; 0x0f
    1872:	98 2f       	mov	r25, r24
    1874:	9c 5f       	subi	r25, 0xFC	; 252
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	69 2f       	mov	r22, r25
    187a:	40 e0       	ldi	r20, 0x00	; 0
    187c:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1880:	18 8a       	std	Y+16, r1	; 0x10
    1882:	22 c0       	rjmp	.+68     	; 0x18c8 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1884:	88 89       	ldd	r24, Y+16	; 0x10
    1886:	98 2f       	mov	r25, r24
    1888:	9e 5f       	subi	r25, 0xFE	; 254
    188a:	83 e0       	ldi	r24, 0x03	; 3
    188c:	69 2f       	mov	r22, r25
    188e:	0e 94 94 0a 	call	0x1528	; 0x1528 <GPIO_readPin>
    1892:	88 23       	and	r24, r24
    1894:	b1 f4       	brne	.+44     	; 0x18c2 <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1896:	8f 85       	ldd	r24, Y+15	; 0x0f
    1898:	88 2f       	mov	r24, r24
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	88 0f       	add	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	98 2f       	mov	r25, r24
    18a6:	88 89       	ldd	r24, Y+16	; 0x10
    18a8:	89 0f       	add	r24, r25
    18aa:	8f 5f       	subi	r24, 0xFF	; 255
    18ac:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    18b0:	60 96       	adiw	r28, 0x10	; 16
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    18c2:	88 89       	ldd	r24, Y+16	; 0x10
    18c4:	8f 5f       	subi	r24, 0xFF	; 255
    18c6:	88 8b       	std	Y+16, r24	; 0x10
    18c8:	88 89       	ldd	r24, Y+16	; 0x10
    18ca:	84 30       	cpi	r24, 0x04	; 4
    18cc:	d8 f2       	brcs	.-74     	; 0x1884 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    18ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    18d0:	98 2f       	mov	r25, r24
    18d2:	9c 5f       	subi	r25, 0xFC	; 252
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	69 2f       	mov	r22, r25
    18d8:	40 e0       	ldi	r20, 0x00	; 0
    18da:	0e 94 be 08 	call	0x117c	; 0x117c <GPIO_setupPinDirection>
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	a0 ea       	ldi	r26, 0xA0	; 160
    18e4:	b0 e4       	ldi	r27, 0x40	; 64
    18e6:	8b 87       	std	Y+11, r24	; 0x0b
    18e8:	9c 87       	std	Y+12, r25	; 0x0c
    18ea:	ad 87       	std	Y+13, r26	; 0x0d
    18ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    18f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	4a e7       	ldi	r20, 0x7A	; 122
    18fc:	55 e4       	ldi	r21, 0x45	; 69
    18fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	8f 83       	std	Y+7, r24	; 0x07
    1908:	98 87       	std	Y+8, r25	; 0x08
    190a:	a9 87       	std	Y+9, r26	; 0x09
    190c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    190e:	6f 81       	ldd	r22, Y+7	; 0x07
    1910:	78 85       	ldd	r23, Y+8	; 0x08
    1912:	89 85       	ldd	r24, Y+9	; 0x09
    1914:	9a 85       	ldd	r25, Y+10	; 0x0a
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e8       	ldi	r20, 0x80	; 128
    191c:	5f e3       	ldi	r21, 0x3F	; 63
    191e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1922:	88 23       	and	r24, r24
    1924:	2c f4       	brge	.+10     	; 0x1930 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	9e 83       	std	Y+6, r25	; 0x06
    192c:	8d 83       	std	Y+5, r24	; 0x05
    192e:	3f c0       	rjmp	.+126    	; 0x19ae <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    1930:	6f 81       	ldd	r22, Y+7	; 0x07
    1932:	78 85       	ldd	r23, Y+8	; 0x08
    1934:	89 85       	ldd	r24, Y+9	; 0x09
    1936:	9a 85       	ldd	r25, Y+10	; 0x0a
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	3f ef       	ldi	r19, 0xFF	; 255
    193c:	4f e7       	ldi	r20, 0x7F	; 127
    193e:	57 e4       	ldi	r21, 0x47	; 71
    1940:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1944:	18 16       	cp	r1, r24
    1946:	4c f5       	brge	.+82     	; 0x199a <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1948:	6b 85       	ldd	r22, Y+11	; 0x0b
    194a:	7c 85       	ldd	r23, Y+12	; 0x0c
    194c:	8d 85       	ldd	r24, Y+13	; 0x0d
    194e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	40 e2       	ldi	r20, 0x20	; 32
    1956:	51 e4       	ldi	r21, 0x41	; 65
    1958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	bc 01       	movw	r22, r24
    1962:	cd 01       	movw	r24, r26
    1964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	9e 83       	std	Y+6, r25	; 0x06
    196e:	8d 83       	std	Y+5, r24	; 0x05
    1970:	0f c0       	rjmp	.+30     	; 0x1990 <KEYPAD_getPressedKey+0x198>
    1972:	80 e9       	ldi	r24, 0x90	; 144
    1974:	91 e0       	ldi	r25, 0x01	; 1
    1976:	9c 83       	std	Y+4, r25	; 0x04
    1978:	8b 83       	std	Y+3, r24	; 0x03
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	9c 81       	ldd	r25, Y+4	; 0x04
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <KEYPAD_getPressedKey+0x186>
    1982:	9c 83       	std	Y+4, r25	; 0x04
    1984:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1986:	8d 81       	ldd	r24, Y+5	; 0x05
    1988:	9e 81       	ldd	r25, Y+6	; 0x06
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	9e 83       	std	Y+6, r25	; 0x06
    198e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1990:	8d 81       	ldd	r24, Y+5	; 0x05
    1992:	9e 81       	ldd	r25, Y+6	; 0x06
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	69 f7       	brne	.-38     	; 0x1972 <KEYPAD_getPressedKey+0x17a>
    1998:	14 c0       	rjmp	.+40     	; 0x19c2 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199a:	6f 81       	ldd	r22, Y+7	; 0x07
    199c:	78 85       	ldd	r23, Y+8	; 0x08
    199e:	89 85       	ldd	r24, Y+9	; 0x09
    19a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	9e 83       	std	Y+6, r25	; 0x06
    19ac:	8d 83       	std	Y+5, r24	; 0x05
    19ae:	8d 81       	ldd	r24, Y+5	; 0x05
    19b0:	9e 81       	ldd	r25, Y+6	; 0x06
    19b2:	9a 83       	std	Y+2, r25	; 0x02
    19b4:	89 83       	std	Y+1, r24	; 0x01
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	9a 81       	ldd	r25, Y+2	; 0x02
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	f1 f7       	brne	.-4      	; 0x19ba <KEYPAD_getPressedKey+0x1c2>
    19be:	9a 83       	std	Y+2, r25	; 0x02
    19c0:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    19c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c4:	8f 5f       	subi	r24, 0xFF	; 255
    19c6:	8f 87       	std	Y+15, r24	; 0x0f
    19c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ca:	84 30       	cpi	r24, 0x04	; 4
    19cc:	08 f4       	brcc	.+2      	; 0x19d0 <KEYPAD_getPressedKey+0x1d8>
    19ce:	48 cf       	rjmp	.-368    	; 0x1860 <KEYPAD_getPressedKey+0x68>
    19d0:	45 cf       	rjmp	.-374    	; 0x185c <KEYPAD_getPressedKey+0x64>

000019d2 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	00 d0       	rcall	.+0      	; 0x19d8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    19d8:	00 d0       	rcall	.+0      	; 0x19da <KEYPAD_4x4_adjustKeyNumber+0x8>
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    19e0:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	3c 83       	std	Y+4, r19	; 0x04
    19ea:	2b 83       	std	Y+3, r18	; 0x03
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	88 30       	cpi	r24, 0x08	; 8
    19f2:	91 05       	cpc	r25, r1
    19f4:	09 f4       	brne	.+2      	; 0x19f8 <KEYPAD_4x4_adjustKeyNumber+0x26>
    19f6:	70 c0       	rjmp	.+224    	; 0x1ad8 <KEYPAD_4x4_adjustKeyNumber+0x106>
    19f8:	2b 81       	ldd	r18, Y+3	; 0x03
    19fa:	3c 81       	ldd	r19, Y+4	; 0x04
    19fc:	29 30       	cpi	r18, 0x09	; 9
    19fe:	31 05       	cpc	r19, r1
    1a00:	5c f5       	brge	.+86     	; 0x1a58 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	84 30       	cpi	r24, 0x04	; 4
    1a08:	91 05       	cpc	r25, r1
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1a0c:	59 c0       	rjmp	.+178    	; 0x1ac0 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1a0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a10:	3c 81       	ldd	r19, Y+4	; 0x04
    1a12:	25 30       	cpi	r18, 0x05	; 5
    1a14:	31 05       	cpc	r19, r1
    1a16:	9c f4       	brge	.+38     	; 0x1a3e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1c:	82 30       	cpi	r24, 0x02	; 2
    1a1e:	91 05       	cpc	r25, r1
    1a20:	09 f4       	brne	.+2      	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1a22:	48 c0       	rjmp	.+144    	; 0x1ab4 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1a24:	2b 81       	ldd	r18, Y+3	; 0x03
    1a26:	3c 81       	ldd	r19, Y+4	; 0x04
    1a28:	23 30       	cpi	r18, 0x03	; 3
    1a2a:	31 05       	cpc	r19, r1
    1a2c:	0c f0       	brlt	.+2      	; 0x1a30 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1a2e:	45 c0       	rjmp	.+138    	; 0x1aba <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	9c 81       	ldd	r25, Y+4	; 0x04
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	91 05       	cpc	r25, r1
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1a3a:	39 c0       	rjmp	.+114    	; 0x1aae <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1a3c:	67 c0       	rjmp	.+206    	; 0x1b0c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1a3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a40:	3c 81       	ldd	r19, Y+4	; 0x04
    1a42:	26 30       	cpi	r18, 0x06	; 6
    1a44:	31 05       	cpc	r19, r1
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <KEYPAD_4x4_adjustKeyNumber+0x78>
    1a48:	41 c0       	rjmp	.+130    	; 0x1acc <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4e:	87 30       	cpi	r24, 0x07	; 7
    1a50:	91 05       	cpc	r25, r1
    1a52:	0c f0       	brlt	.+2      	; 0x1a56 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1a54:	3e c0       	rjmp	.+124    	; 0x1ad2 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1a56:	37 c0       	rjmp	.+110    	; 0x1ac6 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1a58:	2b 81       	ldd	r18, Y+3	; 0x03
    1a5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a5c:	2c 30       	cpi	r18, 0x0C	; 12
    1a5e:	31 05       	cpc	r19, r1
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1a62:	46 c0       	rjmp	.+140    	; 0x1af0 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	9c 81       	ldd	r25, Y+4	; 0x04
    1a68:	8d 30       	cpi	r24, 0x0D	; 13
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	5c f4       	brge	.+22     	; 0x1a84 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1a6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a70:	3c 81       	ldd	r19, Y+4	; 0x04
    1a72:	2a 30       	cpi	r18, 0x0A	; 10
    1a74:	31 05       	cpc	r19, r1
    1a76:	b1 f1       	breq	.+108    	; 0x1ae4 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7c:	8b 30       	cpi	r24, 0x0B	; 11
    1a7e:	91 05       	cpc	r25, r1
    1a80:	a4 f5       	brge	.+104    	; 0x1aea <KEYPAD_4x4_adjustKeyNumber+0x118>
    1a82:	2d c0       	rjmp	.+90     	; 0x1ade <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1a84:	2b 81       	ldd	r18, Y+3	; 0x03
    1a86:	3c 81       	ldd	r19, Y+4	; 0x04
    1a88:	2e 30       	cpi	r18, 0x0E	; 14
    1a8a:	31 05       	cpc	r19, r1
    1a8c:	b9 f1       	breq	.+110    	; 0x1afc <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	9c 81       	ldd	r25, Y+4	; 0x04
    1a92:	8e 30       	cpi	r24, 0x0E	; 14
    1a94:	91 05       	cpc	r25, r1
    1a96:	7c f1       	brlt	.+94     	; 0x1af6 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1a98:	2b 81       	ldd	r18, Y+3	; 0x03
    1a9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a9c:	2f 30       	cpi	r18, 0x0F	; 15
    1a9e:	31 05       	cpc	r19, r1
    1aa0:	79 f1       	breq	.+94     	; 0x1b00 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa6:	80 31       	cpi	r24, 0x10	; 16
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	69 f1       	breq	.+90     	; 0x1b06 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1aac:	2f c0       	rjmp	.+94     	; 0x1b0c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1aae:	87 e0       	ldi	r24, 0x07	; 7
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	2e c0       	rjmp	.+92     	; 0x1b10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1ab4:	88 e0       	ldi	r24, 0x08	; 8
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	2b c0       	rjmp	.+86     	; 0x1b10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1aba:	89 e0       	ldi	r24, 0x09	; 9
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	28 c0       	rjmp	.+80     	; 0x1b10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '/'; // ASCII Code of %
    1ac0:	8f e2       	ldi	r24, 0x2F	; 47
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    1ac4:	25 c0       	rjmp	.+74     	; 0x1b10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1ac6:	84 e0       	ldi	r24, 0x04	; 4
    1ac8:	89 83       	std	Y+1, r24	; 0x01
    1aca:	22 c0       	rjmp	.+68     	; 0x1b10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1acc:	85 e0       	ldi	r24, 0x05	; 5
    1ace:	89 83       	std	Y+1, r24	; 0x01
    1ad0:	1f c0       	rjmp	.+62     	; 0x1b10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1ad2:	86 e0       	ldi	r24, 0x06	; 6
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	1c c0       	rjmp	.+56     	; 0x1b10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1ad8:	8a e2       	ldi	r24, 0x2A	; 42
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	19 c0       	rjmp	.+50     	; 0x1b10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	89 83       	std	Y+1, r24	; 0x01
    1ae2:	16 c0       	rjmp	.+44     	; 0x1b10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1ae4:	82 e0       	ldi	r24, 0x02	; 2
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    1ae8:	13 c0       	rjmp	.+38     	; 0x1b10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1aea:	83 e0       	ldi	r24, 0x03	; 3
    1aec:	89 83       	std	Y+1, r24	; 0x01
    1aee:	10 c0       	rjmp	.+32     	; 0x1b10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1af0:	8d e2       	ldi	r24, 0x2D	; 45
    1af2:	89 83       	std	Y+1, r24	; 0x01
    1af4:	0d c0       	rjmp	.+26     	; 0x1b10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1af6:	8d e0       	ldi	r24, 0x0D	; 13
    1af8:	89 83       	std	Y+1, r24	; 0x01
    1afa:	0a c0       	rjmp	.+20     	; 0x1b10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1afc:	19 82       	std	Y+1, r1	; 0x01
    1afe:	08 c0       	rjmp	.+16     	; 0x1b10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1b00:	8d e3       	ldi	r24, 0x3D	; 61
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	05 c0       	rjmp	.+10     	; 0x1b10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1b06:	8b e2       	ldi	r24, 0x2B	; 43
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    1b28:	2e 97       	sbiw	r28, 0x0e	; 14
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	de bf       	out	0x3e, r29	; 62
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	61 e0       	ldi	r22, 0x01	; 1
    1b38:	41 e0       	ldi	r20, 0x01	; 1
    1b3a:	0e 94 be 08 	call	0x117c	; 0x117c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	62 e0       	ldi	r22, 0x02	; 2
    1b42:	41 e0       	ldi	r20, 0x01	; 1
    1b44:	0e 94 be 08 	call	0x117c	; 0x117c <GPIO_setupPinDirection>
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	a0 ea       	ldi	r26, 0xA0	; 160
    1b4e:	b1 e4       	ldi	r27, 0x41	; 65
    1b50:	8b 87       	std	Y+11, r24	; 0x0b
    1b52:	9c 87       	std	Y+12, r25	; 0x0c
    1b54:	ad 87       	std	Y+13, r26	; 0x0d
    1b56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	4a e7       	ldi	r20, 0x7A	; 122
    1b66:	55 e4       	ldi	r21, 0x45	; 69
    1b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	8f 83       	std	Y+7, r24	; 0x07
    1b72:	98 87       	std	Y+8, r25	; 0x08
    1b74:	a9 87       	std	Y+9, r26	; 0x09
    1b76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b78:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7a:	78 85       	ldd	r23, Y+8	; 0x08
    1b7c:	89 85       	ldd	r24, Y+9	; 0x09
    1b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e8       	ldi	r20, 0x80	; 128
    1b86:	5f e3       	ldi	r21, 0x3F	; 63
    1b88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b8c:	88 23       	and	r24, r24
    1b8e:	2c f4       	brge	.+10     	; 0x1b9a <LCD_init+0x7a>
		__ticks = 1;
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	9e 83       	std	Y+6, r25	; 0x06
    1b96:	8d 83       	std	Y+5, r24	; 0x05
    1b98:	3f c0       	rjmp	.+126    	; 0x1c18 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1b9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b9c:	78 85       	ldd	r23, Y+8	; 0x08
    1b9e:	89 85       	ldd	r24, Y+9	; 0x09
    1ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	3f ef       	ldi	r19, 0xFF	; 255
    1ba6:	4f e7       	ldi	r20, 0x7F	; 127
    1ba8:	57 e4       	ldi	r21, 0x47	; 71
    1baa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bae:	18 16       	cp	r1, r24
    1bb0:	4c f5       	brge	.+82     	; 0x1c04 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	40 e2       	ldi	r20, 0x20	; 32
    1bc0:	51 e4       	ldi	r21, 0x41	; 65
    1bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	bc 01       	movw	r22, r24
    1bcc:	cd 01       	movw	r24, r26
    1bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	9e 83       	std	Y+6, r25	; 0x06
    1bd8:	8d 83       	std	Y+5, r24	; 0x05
    1bda:	0f c0       	rjmp	.+30     	; 0x1bfa <LCD_init+0xda>
    1bdc:	80 e9       	ldi	r24, 0x90	; 144
    1bde:	91 e0       	ldi	r25, 0x01	; 1
    1be0:	9c 83       	std	Y+4, r25	; 0x04
    1be2:	8b 83       	std	Y+3, r24	; 0x03
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	9c 81       	ldd	r25, Y+4	; 0x04
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <LCD_init+0xc8>
    1bec:	9c 83       	std	Y+4, r25	; 0x04
    1bee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	9e 83       	std	Y+6, r25	; 0x06
    1bf8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	69 f7       	brne	.-38     	; 0x1bdc <LCD_init+0xbc>
    1c02:	14 c0       	rjmp	.+40     	; 0x1c2c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c04:	6f 81       	ldd	r22, Y+7	; 0x07
    1c06:	78 85       	ldd	r23, Y+8	; 0x08
    1c08:	89 85       	ldd	r24, Y+9	; 0x09
    1c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	9e 83       	std	Y+6, r25	; 0x06
    1c16:	8d 83       	std	Y+5, r24	; 0x05
    1c18:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1c:	9a 83       	std	Y+2, r25	; 0x02
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	9a 81       	ldd	r25, Y+2	; 0x02
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	f1 f7       	brne	.-4      	; 0x1c24 <LCD_init+0x104>
    1c28:	9a 83       	std	Y+2, r25	; 0x02
    1c2a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	63 e0       	ldi	r22, 0x03	; 3
    1c30:	41 e0       	ldi	r20, 0x01	; 1
    1c32:	0e 94 be 08 	call	0x117c	; 0x117c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	64 e0       	ldi	r22, 0x04	; 4
    1c3a:	41 e0       	ldi	r20, 0x01	; 1
    1c3c:	0e 94 be 08 	call	0x117c	; 0x117c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	65 e0       	ldi	r22, 0x05	; 5
    1c44:	41 e0       	ldi	r20, 0x01	; 1
    1c46:	0e 94 be 08 	call	0x117c	; 0x117c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	66 e0       	ldi	r22, 0x06	; 6
    1c4e:	41 e0       	ldi	r20, 0x01	; 1
    1c50:	0e 94 be 08 	call	0x117c	; 0x117c <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1c54:	83 e3       	ldi	r24, 0x33	; 51
    1c56:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1c5a:	82 e3       	ldi	r24, 0x32	; 50
    1c5c:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1c60:	88 e2       	ldi	r24, 0x28	; 40
    1c62:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1c66:	8c e0       	ldi	r24, 0x0C	; 12
    1c68:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <LCD_sendCommand>
}
    1c72:	2e 96       	adiw	r28, 0x0e	; 14
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1c84:	0f 93       	push	r16
    1c86:	1f 93       	push	r17
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	c3 56       	subi	r28, 0x63	; 99
    1c92:	d0 40       	sbci	r29, 0x00	; 0
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	de bf       	out	0x3e, r29	; 62
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	cd bf       	out	0x3d, r28	; 61
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	ed 59       	subi	r30, 0x9D	; 157
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	61 e0       	ldi	r22, 0x01	; 1
    1caa:	40 e0       	ldi	r20, 0x00	; 0
    1cac:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e1 5a       	subi	r30, 0xA1	; 161
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	a0 e8       	ldi	r26, 0x80	; 128
    1cbc:	bf e3       	ldi	r27, 0x3F	; 63
    1cbe:	80 83       	st	Z, r24
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	a2 83       	std	Z+2, r26	; 0x02
    1cc4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc6:	8e 01       	movw	r16, r28
    1cc8:	05 5a       	subi	r16, 0xA5	; 165
    1cca:	1f 4f       	sbci	r17, 0xFF	; 255
    1ccc:	fe 01       	movw	r30, r28
    1cce:	e1 5a       	subi	r30, 0xA1	; 161
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	60 81       	ld	r22, Z
    1cd4:	71 81       	ldd	r23, Z+1	; 0x01
    1cd6:	82 81       	ldd	r24, Z+2	; 0x02
    1cd8:	93 81       	ldd	r25, Z+3	; 0x03
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	4a e7       	ldi	r20, 0x7A	; 122
    1ce0:	55 e4       	ldi	r21, 0x45	; 69
    1ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	f8 01       	movw	r30, r16
    1cec:	80 83       	st	Z, r24
    1cee:	91 83       	std	Z+1, r25	; 0x01
    1cf0:	a2 83       	std	Z+2, r26	; 0x02
    1cf2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	e5 5a       	subi	r30, 0xA5	; 165
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	60 81       	ld	r22, Z
    1cfc:	71 81       	ldd	r23, Z+1	; 0x01
    1cfe:	82 81       	ldd	r24, Z+2	; 0x02
    1d00:	93 81       	ldd	r25, Z+3	; 0x03
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e8       	ldi	r20, 0x80	; 128
    1d08:	5f e3       	ldi	r21, 0x3F	; 63
    1d0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d0e:	88 23       	and	r24, r24
    1d10:	44 f4       	brge	.+16     	; 0x1d22 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1d12:	fe 01       	movw	r30, r28
    1d14:	e7 5a       	subi	r30, 0xA7	; 167
    1d16:	ff 4f       	sbci	r31, 0xFF	; 255
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	91 83       	std	Z+1, r25	; 0x01
    1d1e:	80 83       	st	Z, r24
    1d20:	64 c0       	rjmp	.+200    	; 0x1dea <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1d22:	fe 01       	movw	r30, r28
    1d24:	e5 5a       	subi	r30, 0xA5	; 165
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	60 81       	ld	r22, Z
    1d2a:	71 81       	ldd	r23, Z+1	; 0x01
    1d2c:	82 81       	ldd	r24, Z+2	; 0x02
    1d2e:	93 81       	ldd	r25, Z+3	; 0x03
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	3f ef       	ldi	r19, 0xFF	; 255
    1d34:	4f e7       	ldi	r20, 0x7F	; 127
    1d36:	57 e4       	ldi	r21, 0x47	; 71
    1d38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d3c:	18 16       	cp	r1, r24
    1d3e:	0c f0       	brlt	.+2      	; 0x1d42 <LCD_sendCommand+0xbe>
    1d40:	43 c0       	rjmp	.+134    	; 0x1dc8 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d42:	fe 01       	movw	r30, r28
    1d44:	e1 5a       	subi	r30, 0xA1	; 161
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	60 81       	ld	r22, Z
    1d4a:	71 81       	ldd	r23, Z+1	; 0x01
    1d4c:	82 81       	ldd	r24, Z+2	; 0x02
    1d4e:	93 81       	ldd	r25, Z+3	; 0x03
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e2       	ldi	r20, 0x20	; 32
    1d56:	51 e4       	ldi	r21, 0x41	; 65
    1d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	8e 01       	movw	r16, r28
    1d62:	07 5a       	subi	r16, 0xA7	; 167
    1d64:	1f 4f       	sbci	r17, 0xFF	; 255
    1d66:	bc 01       	movw	r22, r24
    1d68:	cd 01       	movw	r24, r26
    1d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	f8 01       	movw	r30, r16
    1d74:	91 83       	std	Z+1, r25	; 0x01
    1d76:	80 83       	st	Z, r24
    1d78:	1f c0       	rjmp	.+62     	; 0x1db8 <LCD_sendCommand+0x134>
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	e9 5a       	subi	r30, 0xA9	; 169
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	80 e9       	ldi	r24, 0x90	; 144
    1d82:	91 e0       	ldi	r25, 0x01	; 1
    1d84:	91 83       	std	Z+1, r25	; 0x01
    1d86:	80 83       	st	Z, r24
    1d88:	fe 01       	movw	r30, r28
    1d8a:	e9 5a       	subi	r30, 0xA9	; 169
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	80 81       	ld	r24, Z
    1d90:	91 81       	ldd	r25, Z+1	; 0x01
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <LCD_sendCommand+0x10e>
    1d96:	fe 01       	movw	r30, r28
    1d98:	e9 5a       	subi	r30, 0xA9	; 169
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	91 83       	std	Z+1, r25	; 0x01
    1d9e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da0:	de 01       	movw	r26, r28
    1da2:	a7 5a       	subi	r26, 0xA7	; 167
    1da4:	bf 4f       	sbci	r27, 0xFF	; 255
    1da6:	fe 01       	movw	r30, r28
    1da8:	e7 5a       	subi	r30, 0xA7	; 167
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	80 81       	ld	r24, Z
    1dae:	91 81       	ldd	r25, Z+1	; 0x01
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	11 96       	adiw	r26, 0x01	; 1
    1db4:	9c 93       	st	X, r25
    1db6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db8:	fe 01       	movw	r30, r28
    1dba:	e7 5a       	subi	r30, 0xA7	; 167
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	80 81       	ld	r24, Z
    1dc0:	91 81       	ldd	r25, Z+1	; 0x01
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	d1 f6       	brne	.-76     	; 0x1d7a <LCD_sendCommand+0xf6>
    1dc6:	27 c0       	rjmp	.+78     	; 0x1e16 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc8:	8e 01       	movw	r16, r28
    1dca:	07 5a       	subi	r16, 0xA7	; 167
    1dcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e5 5a       	subi	r30, 0xA5	; 165
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	60 81       	ld	r22, Z
    1dd6:	71 81       	ldd	r23, Z+1	; 0x01
    1dd8:	82 81       	ldd	r24, Z+2	; 0x02
    1dda:	93 81       	ldd	r25, Z+3	; 0x03
    1ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	f8 01       	movw	r30, r16
    1de6:	91 83       	std	Z+1, r25	; 0x01
    1de8:	80 83       	st	Z, r24
    1dea:	de 01       	movw	r26, r28
    1dec:	ab 5a       	subi	r26, 0xAB	; 171
    1dee:	bf 4f       	sbci	r27, 0xFF	; 255
    1df0:	fe 01       	movw	r30, r28
    1df2:	e7 5a       	subi	r30, 0xA7	; 167
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	80 81       	ld	r24, Z
    1df8:	91 81       	ldd	r25, Z+1	; 0x01
    1dfa:	8d 93       	st	X+, r24
    1dfc:	9c 93       	st	X, r25
    1dfe:	fe 01       	movw	r30, r28
    1e00:	eb 5a       	subi	r30, 0xAB	; 171
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	80 81       	ld	r24, Z
    1e06:	91 81       	ldd	r25, Z+1	; 0x01
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <LCD_sendCommand+0x184>
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	eb 5a       	subi	r30, 0xAB	; 171
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	91 83       	std	Z+1, r25	; 0x01
    1e14:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	62 e0       	ldi	r22, 0x02	; 2
    1e1a:	41 e0       	ldi	r20, 0x01	; 1
    1e1c:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
    1e20:	fe 01       	movw	r30, r28
    1e22:	ef 5a       	subi	r30, 0xAF	; 175
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	a0 e8       	ldi	r26, 0x80	; 128
    1e2c:	bf e3       	ldi	r27, 0x3F	; 63
    1e2e:	80 83       	st	Z, r24
    1e30:	91 83       	std	Z+1, r25	; 0x01
    1e32:	a2 83       	std	Z+2, r26	; 0x02
    1e34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e36:	8e 01       	movw	r16, r28
    1e38:	03 5b       	subi	r16, 0xB3	; 179
    1e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	ef 5a       	subi	r30, 0xAF	; 175
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	60 81       	ld	r22, Z
    1e44:	71 81       	ldd	r23, Z+1	; 0x01
    1e46:	82 81       	ldd	r24, Z+2	; 0x02
    1e48:	93 81       	ldd	r25, Z+3	; 0x03
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	4a e7       	ldi	r20, 0x7A	; 122
    1e50:	55 e4       	ldi	r21, 0x45	; 69
    1e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	f8 01       	movw	r30, r16
    1e5c:	80 83       	st	Z, r24
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	a2 83       	std	Z+2, r26	; 0x02
    1e62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e64:	fe 01       	movw	r30, r28
    1e66:	e3 5b       	subi	r30, 0xB3	; 179
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	60 81       	ld	r22, Z
    1e6c:	71 81       	ldd	r23, Z+1	; 0x01
    1e6e:	82 81       	ldd	r24, Z+2	; 0x02
    1e70:	93 81       	ldd	r25, Z+3	; 0x03
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	40 e8       	ldi	r20, 0x80	; 128
    1e78:	5f e3       	ldi	r21, 0x3F	; 63
    1e7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e7e:	88 23       	and	r24, r24
    1e80:	44 f4       	brge	.+16     	; 0x1e92 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1e82:	fe 01       	movw	r30, r28
    1e84:	e5 5b       	subi	r30, 0xB5	; 181
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	91 83       	std	Z+1, r25	; 0x01
    1e8e:	80 83       	st	Z, r24
    1e90:	64 c0       	rjmp	.+200    	; 0x1f5a <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1e92:	fe 01       	movw	r30, r28
    1e94:	e3 5b       	subi	r30, 0xB3	; 179
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	60 81       	ld	r22, Z
    1e9a:	71 81       	ldd	r23, Z+1	; 0x01
    1e9c:	82 81       	ldd	r24, Z+2	; 0x02
    1e9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	3f ef       	ldi	r19, 0xFF	; 255
    1ea4:	4f e7       	ldi	r20, 0x7F	; 127
    1ea6:	57 e4       	ldi	r21, 0x47	; 71
    1ea8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eac:	18 16       	cp	r1, r24
    1eae:	0c f0       	brlt	.+2      	; 0x1eb2 <LCD_sendCommand+0x22e>
    1eb0:	43 c0       	rjmp	.+134    	; 0x1f38 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	ef 5a       	subi	r30, 0xAF	; 175
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	60 81       	ld	r22, Z
    1eba:	71 81       	ldd	r23, Z+1	; 0x01
    1ebc:	82 81       	ldd	r24, Z+2	; 0x02
    1ebe:	93 81       	ldd	r25, Z+3	; 0x03
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e2       	ldi	r20, 0x20	; 32
    1ec6:	51 e4       	ldi	r21, 0x41	; 65
    1ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	8e 01       	movw	r16, r28
    1ed2:	05 5b       	subi	r16, 0xB5	; 181
    1ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed6:	bc 01       	movw	r22, r24
    1ed8:	cd 01       	movw	r24, r26
    1eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	f8 01       	movw	r30, r16
    1ee4:	91 83       	std	Z+1, r25	; 0x01
    1ee6:	80 83       	st	Z, r24
    1ee8:	1f c0       	rjmp	.+62     	; 0x1f28 <LCD_sendCommand+0x2a4>
    1eea:	fe 01       	movw	r30, r28
    1eec:	e7 5b       	subi	r30, 0xB7	; 183
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	80 e9       	ldi	r24, 0x90	; 144
    1ef2:	91 e0       	ldi	r25, 0x01	; 1
    1ef4:	91 83       	std	Z+1, r25	; 0x01
    1ef6:	80 83       	st	Z, r24
    1ef8:	fe 01       	movw	r30, r28
    1efa:	e7 5b       	subi	r30, 0xB7	; 183
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	80 81       	ld	r24, Z
    1f00:	91 81       	ldd	r25, Z+1	; 0x01
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <LCD_sendCommand+0x27e>
    1f06:	fe 01       	movw	r30, r28
    1f08:	e7 5b       	subi	r30, 0xB7	; 183
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	91 83       	std	Z+1, r25	; 0x01
    1f0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f10:	de 01       	movw	r26, r28
    1f12:	a5 5b       	subi	r26, 0xB5	; 181
    1f14:	bf 4f       	sbci	r27, 0xFF	; 255
    1f16:	fe 01       	movw	r30, r28
    1f18:	e5 5b       	subi	r30, 0xB5	; 181
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	80 81       	ld	r24, Z
    1f1e:	91 81       	ldd	r25, Z+1	; 0x01
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	11 96       	adiw	r26, 0x01	; 1
    1f24:	9c 93       	st	X, r25
    1f26:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f28:	fe 01       	movw	r30, r28
    1f2a:	e5 5b       	subi	r30, 0xB5	; 181
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	80 81       	ld	r24, Z
    1f30:	91 81       	ldd	r25, Z+1	; 0x01
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	d1 f6       	brne	.-76     	; 0x1eea <LCD_sendCommand+0x266>
    1f36:	27 c0       	rjmp	.+78     	; 0x1f86 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f38:	8e 01       	movw	r16, r28
    1f3a:	05 5b       	subi	r16, 0xB5	; 181
    1f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f3e:	fe 01       	movw	r30, r28
    1f40:	e3 5b       	subi	r30, 0xB3	; 179
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	60 81       	ld	r22, Z
    1f46:	71 81       	ldd	r23, Z+1	; 0x01
    1f48:	82 81       	ldd	r24, Z+2	; 0x02
    1f4a:	93 81       	ldd	r25, Z+3	; 0x03
    1f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	f8 01       	movw	r30, r16
    1f56:	91 83       	std	Z+1, r25	; 0x01
    1f58:	80 83       	st	Z, r24
    1f5a:	de 01       	movw	r26, r28
    1f5c:	a9 5b       	subi	r26, 0xB9	; 185
    1f5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f60:	fe 01       	movw	r30, r28
    1f62:	e5 5b       	subi	r30, 0xB5	; 181
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	80 81       	ld	r24, Z
    1f68:	91 81       	ldd	r25, Z+1	; 0x01
    1f6a:	8d 93       	st	X+, r24
    1f6c:	9c 93       	st	X, r25
    1f6e:	fe 01       	movw	r30, r28
    1f70:	e9 5b       	subi	r30, 0xB9	; 185
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	80 81       	ld	r24, Z
    1f76:	91 81       	ldd	r25, Z+1	; 0x01
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <LCD_sendCommand+0x2f4>
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	e9 5b       	subi	r30, 0xB9	; 185
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	91 83       	std	Z+1, r25	; 0x01
    1f84:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1f86:	fe 01       	movw	r30, r28
    1f88:	ed 59       	subi	r30, 0x9D	; 157
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	80 81       	ld	r24, Z
    1f8e:	88 2f       	mov	r24, r24
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	80 71       	andi	r24, 0x10	; 16
    1f94:	90 70       	andi	r25, 0x00	; 0
    1f96:	95 95       	asr	r25
    1f98:	87 95       	ror	r24
    1f9a:	95 95       	asr	r25
    1f9c:	87 95       	ror	r24
    1f9e:	95 95       	asr	r25
    1fa0:	87 95       	ror	r24
    1fa2:	95 95       	asr	r25
    1fa4:	87 95       	ror	r24
    1fa6:	98 2f       	mov	r25, r24
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	63 e0       	ldi	r22, 0x03	; 3
    1fac:	49 2f       	mov	r20, r25
    1fae:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	ed 59       	subi	r30, 0x9D	; 157
    1fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb8:	80 81       	ld	r24, Z
    1fba:	88 2f       	mov	r24, r24
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	80 72       	andi	r24, 0x20	; 32
    1fc0:	90 70       	andi	r25, 0x00	; 0
    1fc2:	95 95       	asr	r25
    1fc4:	87 95       	ror	r24
    1fc6:	95 95       	asr	r25
    1fc8:	87 95       	ror	r24
    1fca:	95 95       	asr	r25
    1fcc:	87 95       	ror	r24
    1fce:	95 95       	asr	r25
    1fd0:	87 95       	ror	r24
    1fd2:	95 95       	asr	r25
    1fd4:	87 95       	ror	r24
    1fd6:	98 2f       	mov	r25, r24
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	64 e0       	ldi	r22, 0x04	; 4
    1fdc:	49 2f       	mov	r20, r25
    1fde:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	ed 59       	subi	r30, 0x9D	; 157
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	80 81       	ld	r24, Z
    1fea:	88 2f       	mov	r24, r24
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	80 74       	andi	r24, 0x40	; 64
    1ff0:	90 70       	andi	r25, 0x00	; 0
    1ff2:	08 2e       	mov	r0, r24
    1ff4:	89 2f       	mov	r24, r25
    1ff6:	00 0c       	add	r0, r0
    1ff8:	88 1f       	adc	r24, r24
    1ffa:	99 0b       	sbc	r25, r25
    1ffc:	00 0c       	add	r0, r0
    1ffe:	88 1f       	adc	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	98 2f       	mov	r25, r24
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	65 e0       	ldi	r22, 0x05	; 5
    2008:	49 2f       	mov	r20, r25
    200a:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    200e:	fe 01       	movw	r30, r28
    2010:	ed 59       	subi	r30, 0x9D	; 157
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	80 81       	ld	r24, Z
    2016:	98 2f       	mov	r25, r24
    2018:	99 1f       	adc	r25, r25
    201a:	99 27       	eor	r25, r25
    201c:	99 1f       	adc	r25, r25
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	66 e0       	ldi	r22, 0x06	; 6
    2022:	49 2f       	mov	r20, r25
    2024:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
    2028:	fe 01       	movw	r30, r28
    202a:	ed 5b       	subi	r30, 0xBD	; 189
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	a0 e8       	ldi	r26, 0x80	; 128
    2034:	bf e3       	ldi	r27, 0x3F	; 63
    2036:	80 83       	st	Z, r24
    2038:	91 83       	std	Z+1, r25	; 0x01
    203a:	a2 83       	std	Z+2, r26	; 0x02
    203c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203e:	8e 01       	movw	r16, r28
    2040:	01 5c       	subi	r16, 0xC1	; 193
    2042:	1f 4f       	sbci	r17, 0xFF	; 255
    2044:	fe 01       	movw	r30, r28
    2046:	ed 5b       	subi	r30, 0xBD	; 189
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	60 81       	ld	r22, Z
    204c:	71 81       	ldd	r23, Z+1	; 0x01
    204e:	82 81       	ldd	r24, Z+2	; 0x02
    2050:	93 81       	ldd	r25, Z+3	; 0x03
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	4a e7       	ldi	r20, 0x7A	; 122
    2058:	55 e4       	ldi	r21, 0x45	; 69
    205a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	f8 01       	movw	r30, r16
    2064:	80 83       	st	Z, r24
    2066:	91 83       	std	Z+1, r25	; 0x01
    2068:	a2 83       	std	Z+2, r26	; 0x02
    206a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    206c:	fe 01       	movw	r30, r28
    206e:	ff 96       	adiw	r30, 0x3f	; 63
    2070:	60 81       	ld	r22, Z
    2072:	71 81       	ldd	r23, Z+1	; 0x01
    2074:	82 81       	ldd	r24, Z+2	; 0x02
    2076:	93 81       	ldd	r25, Z+3	; 0x03
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e8       	ldi	r20, 0x80	; 128
    207e:	5f e3       	ldi	r21, 0x3F	; 63
    2080:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2084:	88 23       	and	r24, r24
    2086:	2c f4       	brge	.+10     	; 0x2092 <LCD_sendCommand+0x40e>
		__ticks = 1;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	9e af       	std	Y+62, r25	; 0x3e
    208e:	8d af       	std	Y+61, r24	; 0x3d
    2090:	46 c0       	rjmp	.+140    	; 0x211e <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2092:	fe 01       	movw	r30, r28
    2094:	ff 96       	adiw	r30, 0x3f	; 63
    2096:	60 81       	ld	r22, Z
    2098:	71 81       	ldd	r23, Z+1	; 0x01
    209a:	82 81       	ldd	r24, Z+2	; 0x02
    209c:	93 81       	ldd	r25, Z+3	; 0x03
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	3f ef       	ldi	r19, 0xFF	; 255
    20a2:	4f e7       	ldi	r20, 0x7F	; 127
    20a4:	57 e4       	ldi	r21, 0x47	; 71
    20a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20aa:	18 16       	cp	r1, r24
    20ac:	64 f5       	brge	.+88     	; 0x2106 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ae:	fe 01       	movw	r30, r28
    20b0:	ed 5b       	subi	r30, 0xBD	; 189
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	60 81       	ld	r22, Z
    20b6:	71 81       	ldd	r23, Z+1	; 0x01
    20b8:	82 81       	ldd	r24, Z+2	; 0x02
    20ba:	93 81       	ldd	r25, Z+3	; 0x03
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e2       	ldi	r20, 0x20	; 32
    20c2:	51 e4       	ldi	r21, 0x41	; 65
    20c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	bc 01       	movw	r22, r24
    20ce:	cd 01       	movw	r24, r26
    20d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	9e af       	std	Y+62, r25	; 0x3e
    20da:	8d af       	std	Y+61, r24	; 0x3d
    20dc:	0f c0       	rjmp	.+30     	; 0x20fc <LCD_sendCommand+0x478>
    20de:	80 e9       	ldi	r24, 0x90	; 144
    20e0:	91 e0       	ldi	r25, 0x01	; 1
    20e2:	9c af       	std	Y+60, r25	; 0x3c
    20e4:	8b af       	std	Y+59, r24	; 0x3b
    20e6:	8b ad       	ldd	r24, Y+59	; 0x3b
    20e8:	9c ad       	ldd	r25, Y+60	; 0x3c
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <LCD_sendCommand+0x466>
    20ee:	9c af       	std	Y+60, r25	; 0x3c
    20f0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    20f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	9e af       	std	Y+62, r25	; 0x3e
    20fa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    20fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	69 f7       	brne	.-38     	; 0x20de <LCD_sendCommand+0x45a>
    2104:	16 c0       	rjmp	.+44     	; 0x2132 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2106:	fe 01       	movw	r30, r28
    2108:	ff 96       	adiw	r30, 0x3f	; 63
    210a:	60 81       	ld	r22, Z
    210c:	71 81       	ldd	r23, Z+1	; 0x01
    210e:	82 81       	ldd	r24, Z+2	; 0x02
    2110:	93 81       	ldd	r25, Z+3	; 0x03
    2112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	9e af       	std	Y+62, r25	; 0x3e
    211c:	8d af       	std	Y+61, r24	; 0x3d
    211e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2120:	9e ad       	ldd	r25, Y+62	; 0x3e
    2122:	9a af       	std	Y+58, r25	; 0x3a
    2124:	89 af       	std	Y+57, r24	; 0x39
    2126:	89 ad       	ldd	r24, Y+57	; 0x39
    2128:	9a ad       	ldd	r25, Y+58	; 0x3a
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	f1 f7       	brne	.-4      	; 0x212a <LCD_sendCommand+0x4a6>
    212e:	9a af       	std	Y+58, r25	; 0x3a
    2130:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	62 e0       	ldi	r22, 0x02	; 2
    2136:	40 e0       	ldi	r20, 0x00	; 0
    2138:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	a0 e8       	ldi	r26, 0x80	; 128
    2142:	bf e3       	ldi	r27, 0x3F	; 63
    2144:	8d ab       	std	Y+53, r24	; 0x35
    2146:	9e ab       	std	Y+54, r25	; 0x36
    2148:	af ab       	std	Y+55, r26	; 0x37
    214a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214c:	6d a9       	ldd	r22, Y+53	; 0x35
    214e:	7e a9       	ldd	r23, Y+54	; 0x36
    2150:	8f a9       	ldd	r24, Y+55	; 0x37
    2152:	98 ad       	ldd	r25, Y+56	; 0x38
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	4a e7       	ldi	r20, 0x7A	; 122
    215a:	55 e4       	ldi	r21, 0x45	; 69
    215c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	89 ab       	std	Y+49, r24	; 0x31
    2166:	9a ab       	std	Y+50, r25	; 0x32
    2168:	ab ab       	std	Y+51, r26	; 0x33
    216a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    216c:	69 a9       	ldd	r22, Y+49	; 0x31
    216e:	7a a9       	ldd	r23, Y+50	; 0x32
    2170:	8b a9       	ldd	r24, Y+51	; 0x33
    2172:	9c a9       	ldd	r25, Y+52	; 0x34
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e8       	ldi	r20, 0x80	; 128
    217a:	5f e3       	ldi	r21, 0x3F	; 63
    217c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2180:	88 23       	and	r24, r24
    2182:	2c f4       	brge	.+10     	; 0x218e <LCD_sendCommand+0x50a>
		__ticks = 1;
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	98 ab       	std	Y+48, r25	; 0x30
    218a:	8f a7       	std	Y+47, r24	; 0x2f
    218c:	3f c0       	rjmp	.+126    	; 0x220c <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    218e:	69 a9       	ldd	r22, Y+49	; 0x31
    2190:	7a a9       	ldd	r23, Y+50	; 0x32
    2192:	8b a9       	ldd	r24, Y+51	; 0x33
    2194:	9c a9       	ldd	r25, Y+52	; 0x34
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	3f ef       	ldi	r19, 0xFF	; 255
    219a:	4f e7       	ldi	r20, 0x7F	; 127
    219c:	57 e4       	ldi	r21, 0x47	; 71
    219e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21a2:	18 16       	cp	r1, r24
    21a4:	4c f5       	brge	.+82     	; 0x21f8 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a6:	6d a9       	ldd	r22, Y+53	; 0x35
    21a8:	7e a9       	ldd	r23, Y+54	; 0x36
    21aa:	8f a9       	ldd	r24, Y+55	; 0x37
    21ac:	98 ad       	ldd	r25, Y+56	; 0x38
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	40 e2       	ldi	r20, 0x20	; 32
    21b4:	51 e4       	ldi	r21, 0x41	; 65
    21b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	bc 01       	movw	r22, r24
    21c0:	cd 01       	movw	r24, r26
    21c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	98 ab       	std	Y+48, r25	; 0x30
    21cc:	8f a7       	std	Y+47, r24	; 0x2f
    21ce:	0f c0       	rjmp	.+30     	; 0x21ee <LCD_sendCommand+0x56a>
    21d0:	80 e9       	ldi	r24, 0x90	; 144
    21d2:	91 e0       	ldi	r25, 0x01	; 1
    21d4:	9e a7       	std	Y+46, r25	; 0x2e
    21d6:	8d a7       	std	Y+45, r24	; 0x2d
    21d8:	8d a5       	ldd	r24, Y+45	; 0x2d
    21da:	9e a5       	ldd	r25, Y+46	; 0x2e
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	f1 f7       	brne	.-4      	; 0x21dc <LCD_sendCommand+0x558>
    21e0:	9e a7       	std	Y+46, r25	; 0x2e
    21e2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    21e6:	98 a9       	ldd	r25, Y+48	; 0x30
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	98 ab       	std	Y+48, r25	; 0x30
    21ec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    21f0:	98 a9       	ldd	r25, Y+48	; 0x30
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	69 f7       	brne	.-38     	; 0x21d0 <LCD_sendCommand+0x54c>
    21f6:	14 c0       	rjmp	.+40     	; 0x2220 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f8:	69 a9       	ldd	r22, Y+49	; 0x31
    21fa:	7a a9       	ldd	r23, Y+50	; 0x32
    21fc:	8b a9       	ldd	r24, Y+51	; 0x33
    21fe:	9c a9       	ldd	r25, Y+52	; 0x34
    2200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	98 ab       	std	Y+48, r25	; 0x30
    220a:	8f a7       	std	Y+47, r24	; 0x2f
    220c:	8f a5       	ldd	r24, Y+47	; 0x2f
    220e:	98 a9       	ldd	r25, Y+48	; 0x30
    2210:	9c a7       	std	Y+44, r25	; 0x2c
    2212:	8b a7       	std	Y+43, r24	; 0x2b
    2214:	8b a5       	ldd	r24, Y+43	; 0x2b
    2216:	9c a5       	ldd	r25, Y+44	; 0x2c
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	f1 f7       	brne	.-4      	; 0x2218 <LCD_sendCommand+0x594>
    221c:	9c a7       	std	Y+44, r25	; 0x2c
    221e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	62 e0       	ldi	r22, 0x02	; 2
    2224:	41 e0       	ldi	r20, 0x01	; 1
    2226:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	a0 e8       	ldi	r26, 0x80	; 128
    2230:	bf e3       	ldi	r27, 0x3F	; 63
    2232:	8f a3       	std	Y+39, r24	; 0x27
    2234:	98 a7       	std	Y+40, r25	; 0x28
    2236:	a9 a7       	std	Y+41, r26	; 0x29
    2238:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223a:	6f a1       	ldd	r22, Y+39	; 0x27
    223c:	78 a5       	ldd	r23, Y+40	; 0x28
    223e:	89 a5       	ldd	r24, Y+41	; 0x29
    2240:	9a a5       	ldd	r25, Y+42	; 0x2a
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	4a e7       	ldi	r20, 0x7A	; 122
    2248:	55 e4       	ldi	r21, 0x45	; 69
    224a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	8b a3       	std	Y+35, r24	; 0x23
    2254:	9c a3       	std	Y+36, r25	; 0x24
    2256:	ad a3       	std	Y+37, r26	; 0x25
    2258:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    225a:	6b a1       	ldd	r22, Y+35	; 0x23
    225c:	7c a1       	ldd	r23, Y+36	; 0x24
    225e:	8d a1       	ldd	r24, Y+37	; 0x25
    2260:	9e a1       	ldd	r25, Y+38	; 0x26
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e8       	ldi	r20, 0x80	; 128
    2268:	5f e3       	ldi	r21, 0x3F	; 63
    226a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    226e:	88 23       	and	r24, r24
    2270:	2c f4       	brge	.+10     	; 0x227c <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	9a a3       	std	Y+34, r25	; 0x22
    2278:	89 a3       	std	Y+33, r24	; 0x21
    227a:	3f c0       	rjmp	.+126    	; 0x22fa <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    227c:	6b a1       	ldd	r22, Y+35	; 0x23
    227e:	7c a1       	ldd	r23, Y+36	; 0x24
    2280:	8d a1       	ldd	r24, Y+37	; 0x25
    2282:	9e a1       	ldd	r25, Y+38	; 0x26
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	3f ef       	ldi	r19, 0xFF	; 255
    2288:	4f e7       	ldi	r20, 0x7F	; 127
    228a:	57 e4       	ldi	r21, 0x47	; 71
    228c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2290:	18 16       	cp	r1, r24
    2292:	4c f5       	brge	.+82     	; 0x22e6 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2294:	6f a1       	ldd	r22, Y+39	; 0x27
    2296:	78 a5       	ldd	r23, Y+40	; 0x28
    2298:	89 a5       	ldd	r24, Y+41	; 0x29
    229a:	9a a5       	ldd	r25, Y+42	; 0x2a
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	40 e2       	ldi	r20, 0x20	; 32
    22a2:	51 e4       	ldi	r21, 0x41	; 65
    22a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	bc 01       	movw	r22, r24
    22ae:	cd 01       	movw	r24, r26
    22b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	9a a3       	std	Y+34, r25	; 0x22
    22ba:	89 a3       	std	Y+33, r24	; 0x21
    22bc:	0f c0       	rjmp	.+30     	; 0x22dc <LCD_sendCommand+0x658>
    22be:	80 e9       	ldi	r24, 0x90	; 144
    22c0:	91 e0       	ldi	r25, 0x01	; 1
    22c2:	98 a3       	std	Y+32, r25	; 0x20
    22c4:	8f 8f       	std	Y+31, r24	; 0x1f
    22c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22c8:	98 a1       	ldd	r25, Y+32	; 0x20
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	f1 f7       	brne	.-4      	; 0x22ca <LCD_sendCommand+0x646>
    22ce:	98 a3       	std	Y+32, r25	; 0x20
    22d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d2:	89 a1       	ldd	r24, Y+33	; 0x21
    22d4:	9a a1       	ldd	r25, Y+34	; 0x22
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	9a a3       	std	Y+34, r25	; 0x22
    22da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22dc:	89 a1       	ldd	r24, Y+33	; 0x21
    22de:	9a a1       	ldd	r25, Y+34	; 0x22
    22e0:	00 97       	sbiw	r24, 0x00	; 0
    22e2:	69 f7       	brne	.-38     	; 0x22be <LCD_sendCommand+0x63a>
    22e4:	14 c0       	rjmp	.+40     	; 0x230e <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e6:	6b a1       	ldd	r22, Y+35	; 0x23
    22e8:	7c a1       	ldd	r23, Y+36	; 0x24
    22ea:	8d a1       	ldd	r24, Y+37	; 0x25
    22ec:	9e a1       	ldd	r25, Y+38	; 0x26
    22ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	9a a3       	std	Y+34, r25	; 0x22
    22f8:	89 a3       	std	Y+33, r24	; 0x21
    22fa:	89 a1       	ldd	r24, Y+33	; 0x21
    22fc:	9a a1       	ldd	r25, Y+34	; 0x22
    22fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2300:	8d 8f       	std	Y+29, r24	; 0x1d
    2302:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2304:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	f1 f7       	brne	.-4      	; 0x2306 <LCD_sendCommand+0x682>
    230a:	9e 8f       	std	Y+30, r25	; 0x1e
    230c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    230e:	fe 01       	movw	r30, r28
    2310:	ed 59       	subi	r30, 0x9D	; 157
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	80 81       	ld	r24, Z
    2316:	98 2f       	mov	r25, r24
    2318:	91 70       	andi	r25, 0x01	; 1
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	63 e0       	ldi	r22, 0x03	; 3
    231e:	49 2f       	mov	r20, r25
    2320:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2324:	fe 01       	movw	r30, r28
    2326:	ed 59       	subi	r30, 0x9D	; 157
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	80 81       	ld	r24, Z
    232c:	88 2f       	mov	r24, r24
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	82 70       	andi	r24, 0x02	; 2
    2332:	90 70       	andi	r25, 0x00	; 0
    2334:	95 95       	asr	r25
    2336:	87 95       	ror	r24
    2338:	98 2f       	mov	r25, r24
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	64 e0       	ldi	r22, 0x04	; 4
    233e:	49 2f       	mov	r20, r25
    2340:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2344:	fe 01       	movw	r30, r28
    2346:	ed 59       	subi	r30, 0x9D	; 157
    2348:	ff 4f       	sbci	r31, 0xFF	; 255
    234a:	80 81       	ld	r24, Z
    234c:	88 2f       	mov	r24, r24
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	84 70       	andi	r24, 0x04	; 4
    2352:	90 70       	andi	r25, 0x00	; 0
    2354:	95 95       	asr	r25
    2356:	87 95       	ror	r24
    2358:	95 95       	asr	r25
    235a:	87 95       	ror	r24
    235c:	98 2f       	mov	r25, r24
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	65 e0       	ldi	r22, 0x05	; 5
    2362:	49 2f       	mov	r20, r25
    2364:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2368:	fe 01       	movw	r30, r28
    236a:	ed 59       	subi	r30, 0x9D	; 157
    236c:	ff 4f       	sbci	r31, 0xFF	; 255
    236e:	80 81       	ld	r24, Z
    2370:	88 2f       	mov	r24, r24
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	88 70       	andi	r24, 0x08	; 8
    2376:	90 70       	andi	r25, 0x00	; 0
    2378:	95 95       	asr	r25
    237a:	87 95       	ror	r24
    237c:	95 95       	asr	r25
    237e:	87 95       	ror	r24
    2380:	95 95       	asr	r25
    2382:	87 95       	ror	r24
    2384:	98 2f       	mov	r25, r24
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	66 e0       	ldi	r22, 0x06	; 6
    238a:	49 2f       	mov	r20, r25
    238c:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	a0 e8       	ldi	r26, 0x80	; 128
    2396:	bf e3       	ldi	r27, 0x3F	; 63
    2398:	89 8f       	std	Y+25, r24	; 0x19
    239a:	9a 8f       	std	Y+26, r25	; 0x1a
    239c:	ab 8f       	std	Y+27, r26	; 0x1b
    239e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a0:	69 8d       	ldd	r22, Y+25	; 0x19
    23a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	4a e7       	ldi	r20, 0x7A	; 122
    23ae:	55 e4       	ldi	r21, 0x45	; 69
    23b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	8d 8b       	std	Y+21, r24	; 0x15
    23ba:	9e 8b       	std	Y+22, r25	; 0x16
    23bc:	af 8b       	std	Y+23, r26	; 0x17
    23be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23c0:	6d 89       	ldd	r22, Y+21	; 0x15
    23c2:	7e 89       	ldd	r23, Y+22	; 0x16
    23c4:	8f 89       	ldd	r24, Y+23	; 0x17
    23c6:	98 8d       	ldd	r25, Y+24	; 0x18
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	40 e8       	ldi	r20, 0x80	; 128
    23ce:	5f e3       	ldi	r21, 0x3F	; 63
    23d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23d4:	88 23       	and	r24, r24
    23d6:	2c f4       	brge	.+10     	; 0x23e2 <LCD_sendCommand+0x75e>
		__ticks = 1;
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	9c 8b       	std	Y+20, r25	; 0x14
    23de:	8b 8b       	std	Y+19, r24	; 0x13
    23e0:	3f c0       	rjmp	.+126    	; 0x2460 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    23e2:	6d 89       	ldd	r22, Y+21	; 0x15
    23e4:	7e 89       	ldd	r23, Y+22	; 0x16
    23e6:	8f 89       	ldd	r24, Y+23	; 0x17
    23e8:	98 8d       	ldd	r25, Y+24	; 0x18
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	3f ef       	ldi	r19, 0xFF	; 255
    23ee:	4f e7       	ldi	r20, 0x7F	; 127
    23f0:	57 e4       	ldi	r21, 0x47	; 71
    23f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23f6:	18 16       	cp	r1, r24
    23f8:	4c f5       	brge	.+82     	; 0x244c <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fa:	69 8d       	ldd	r22, Y+25	; 0x19
    23fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2400:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e2       	ldi	r20, 0x20	; 32
    2408:	51 e4       	ldi	r21, 0x41	; 65
    240a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	bc 01       	movw	r22, r24
    2414:	cd 01       	movw	r24, r26
    2416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	9c 8b       	std	Y+20, r25	; 0x14
    2420:	8b 8b       	std	Y+19, r24	; 0x13
    2422:	0f c0       	rjmp	.+30     	; 0x2442 <LCD_sendCommand+0x7be>
    2424:	80 e9       	ldi	r24, 0x90	; 144
    2426:	91 e0       	ldi	r25, 0x01	; 1
    2428:	9a 8b       	std	Y+18, r25	; 0x12
    242a:	89 8b       	std	Y+17, r24	; 0x11
    242c:	89 89       	ldd	r24, Y+17	; 0x11
    242e:	9a 89       	ldd	r25, Y+18	; 0x12
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	f1 f7       	brne	.-4      	; 0x2430 <LCD_sendCommand+0x7ac>
    2434:	9a 8b       	std	Y+18, r25	; 0x12
    2436:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2438:	8b 89       	ldd	r24, Y+19	; 0x13
    243a:	9c 89       	ldd	r25, Y+20	; 0x14
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	9c 8b       	std	Y+20, r25	; 0x14
    2440:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2442:	8b 89       	ldd	r24, Y+19	; 0x13
    2444:	9c 89       	ldd	r25, Y+20	; 0x14
    2446:	00 97       	sbiw	r24, 0x00	; 0
    2448:	69 f7       	brne	.-38     	; 0x2424 <LCD_sendCommand+0x7a0>
    244a:	14 c0       	rjmp	.+40     	; 0x2474 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244c:	6d 89       	ldd	r22, Y+21	; 0x15
    244e:	7e 89       	ldd	r23, Y+22	; 0x16
    2450:	8f 89       	ldd	r24, Y+23	; 0x17
    2452:	98 8d       	ldd	r25, Y+24	; 0x18
    2454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	9c 8b       	std	Y+20, r25	; 0x14
    245e:	8b 8b       	std	Y+19, r24	; 0x13
    2460:	8b 89       	ldd	r24, Y+19	; 0x13
    2462:	9c 89       	ldd	r25, Y+20	; 0x14
    2464:	98 8b       	std	Y+16, r25	; 0x10
    2466:	8f 87       	std	Y+15, r24	; 0x0f
    2468:	8f 85       	ldd	r24, Y+15	; 0x0f
    246a:	98 89       	ldd	r25, Y+16	; 0x10
    246c:	01 97       	sbiw	r24, 0x01	; 1
    246e:	f1 f7       	brne	.-4      	; 0x246c <LCD_sendCommand+0x7e8>
    2470:	98 8b       	std	Y+16, r25	; 0x10
    2472:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	62 e0       	ldi	r22, 0x02	; 2
    2478:	40 e0       	ldi	r20, 0x00	; 0
    247a:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	a0 e8       	ldi	r26, 0x80	; 128
    2484:	bf e3       	ldi	r27, 0x3F	; 63
    2486:	8b 87       	std	Y+11, r24	; 0x0b
    2488:	9c 87       	std	Y+12, r25	; 0x0c
    248a:	ad 87       	std	Y+13, r26	; 0x0d
    248c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2490:	7c 85       	ldd	r23, Y+12	; 0x0c
    2492:	8d 85       	ldd	r24, Y+13	; 0x0d
    2494:	9e 85       	ldd	r25, Y+14	; 0x0e
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	4a e7       	ldi	r20, 0x7A	; 122
    249c:	55 e4       	ldi	r21, 0x45	; 69
    249e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	8f 83       	std	Y+7, r24	; 0x07
    24a8:	98 87       	std	Y+8, r25	; 0x08
    24aa:	a9 87       	std	Y+9, r26	; 0x09
    24ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ae:	6f 81       	ldd	r22, Y+7	; 0x07
    24b0:	78 85       	ldd	r23, Y+8	; 0x08
    24b2:	89 85       	ldd	r24, Y+9	; 0x09
    24b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	40 e8       	ldi	r20, 0x80	; 128
    24bc:	5f e3       	ldi	r21, 0x3F	; 63
    24be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24c2:	88 23       	and	r24, r24
    24c4:	2c f4       	brge	.+10     	; 0x24d0 <LCD_sendCommand+0x84c>
		__ticks = 1;
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	9e 83       	std	Y+6, r25	; 0x06
    24cc:	8d 83       	std	Y+5, r24	; 0x05
    24ce:	3f c0       	rjmp	.+126    	; 0x254e <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    24d0:	6f 81       	ldd	r22, Y+7	; 0x07
    24d2:	78 85       	ldd	r23, Y+8	; 0x08
    24d4:	89 85       	ldd	r24, Y+9	; 0x09
    24d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	3f ef       	ldi	r19, 0xFF	; 255
    24dc:	4f e7       	ldi	r20, 0x7F	; 127
    24de:	57 e4       	ldi	r21, 0x47	; 71
    24e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24e4:	18 16       	cp	r1, r24
    24e6:	4c f5       	brge	.+82     	; 0x253a <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	40 e2       	ldi	r20, 0x20	; 32
    24f6:	51 e4       	ldi	r21, 0x41	; 65
    24f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	bc 01       	movw	r22, r24
    2502:	cd 01       	movw	r24, r26
    2504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	9e 83       	std	Y+6, r25	; 0x06
    250e:	8d 83       	std	Y+5, r24	; 0x05
    2510:	0f c0       	rjmp	.+30     	; 0x2530 <LCD_sendCommand+0x8ac>
    2512:	80 e9       	ldi	r24, 0x90	; 144
    2514:	91 e0       	ldi	r25, 0x01	; 1
    2516:	9c 83       	std	Y+4, r25	; 0x04
    2518:	8b 83       	std	Y+3, r24	; 0x03
    251a:	8b 81       	ldd	r24, Y+3	; 0x03
    251c:	9c 81       	ldd	r25, Y+4	; 0x04
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	f1 f7       	brne	.-4      	; 0x251e <LCD_sendCommand+0x89a>
    2522:	9c 83       	std	Y+4, r25	; 0x04
    2524:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2526:	8d 81       	ldd	r24, Y+5	; 0x05
    2528:	9e 81       	ldd	r25, Y+6	; 0x06
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	9e 83       	std	Y+6, r25	; 0x06
    252e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2530:	8d 81       	ldd	r24, Y+5	; 0x05
    2532:	9e 81       	ldd	r25, Y+6	; 0x06
    2534:	00 97       	sbiw	r24, 0x00	; 0
    2536:	69 f7       	brne	.-38     	; 0x2512 <LCD_sendCommand+0x88e>
    2538:	14 c0       	rjmp	.+40     	; 0x2562 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253a:	6f 81       	ldd	r22, Y+7	; 0x07
    253c:	78 85       	ldd	r23, Y+8	; 0x08
    253e:	89 85       	ldd	r24, Y+9	; 0x09
    2540:	9a 85       	ldd	r25, Y+10	; 0x0a
    2542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	9e 83       	std	Y+6, r25	; 0x06
    254c:	8d 83       	std	Y+5, r24	; 0x05
    254e:	8d 81       	ldd	r24, Y+5	; 0x05
    2550:	9e 81       	ldd	r25, Y+6	; 0x06
    2552:	9a 83       	std	Y+2, r25	; 0x02
    2554:	89 83       	std	Y+1, r24	; 0x01
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	9a 81       	ldd	r25, Y+2	; 0x02
    255a:	01 97       	sbiw	r24, 0x01	; 1
    255c:	f1 f7       	brne	.-4      	; 0x255a <LCD_sendCommand+0x8d6>
    255e:	9a 83       	std	Y+2, r25	; 0x02
    2560:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2562:	cd 59       	subi	r28, 0x9D	; 157
    2564:	df 4f       	sbci	r29, 0xFF	; 255
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	f8 94       	cli
    256a:	de bf       	out	0x3e, r29	; 62
    256c:	0f be       	out	0x3f, r0	; 63
    256e:	cd bf       	out	0x3d, r28	; 61
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	1f 91       	pop	r17
    2576:	0f 91       	pop	r16
    2578:	08 95       	ret

0000257a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    257a:	0f 93       	push	r16
    257c:	1f 93       	push	r17
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	c3 56       	subi	r28, 0x63	; 99
    2588:	d0 40       	sbci	r29, 0x00	; 0
    258a:	0f b6       	in	r0, 0x3f	; 63
    258c:	f8 94       	cli
    258e:	de bf       	out	0x3e, r29	; 62
    2590:	0f be       	out	0x3f, r0	; 63
    2592:	cd bf       	out	0x3d, r28	; 61
    2594:	fe 01       	movw	r30, r28
    2596:	ed 59       	subi	r30, 0x9D	; 157
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	61 e0       	ldi	r22, 0x01	; 1
    25a0:	41 e0       	ldi	r20, 0x01	; 1
    25a2:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
    25a6:	fe 01       	movw	r30, r28
    25a8:	e1 5a       	subi	r30, 0xA1	; 161
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	a0 e8       	ldi	r26, 0x80	; 128
    25b2:	bf e3       	ldi	r27, 0x3F	; 63
    25b4:	80 83       	st	Z, r24
    25b6:	91 83       	std	Z+1, r25	; 0x01
    25b8:	a2 83       	std	Z+2, r26	; 0x02
    25ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25bc:	8e 01       	movw	r16, r28
    25be:	05 5a       	subi	r16, 0xA5	; 165
    25c0:	1f 4f       	sbci	r17, 0xFF	; 255
    25c2:	fe 01       	movw	r30, r28
    25c4:	e1 5a       	subi	r30, 0xA1	; 161
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	60 81       	ld	r22, Z
    25ca:	71 81       	ldd	r23, Z+1	; 0x01
    25cc:	82 81       	ldd	r24, Z+2	; 0x02
    25ce:	93 81       	ldd	r25, Z+3	; 0x03
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	4a e7       	ldi	r20, 0x7A	; 122
    25d6:	55 e4       	ldi	r21, 0x45	; 69
    25d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	f8 01       	movw	r30, r16
    25e2:	80 83       	st	Z, r24
    25e4:	91 83       	std	Z+1, r25	; 0x01
    25e6:	a2 83       	std	Z+2, r26	; 0x02
    25e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25ea:	fe 01       	movw	r30, r28
    25ec:	e5 5a       	subi	r30, 0xA5	; 165
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	60 81       	ld	r22, Z
    25f2:	71 81       	ldd	r23, Z+1	; 0x01
    25f4:	82 81       	ldd	r24, Z+2	; 0x02
    25f6:	93 81       	ldd	r25, Z+3	; 0x03
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	40 e8       	ldi	r20, 0x80	; 128
    25fe:	5f e3       	ldi	r21, 0x3F	; 63
    2600:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2604:	88 23       	and	r24, r24
    2606:	44 f4       	brge	.+16     	; 0x2618 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2608:	fe 01       	movw	r30, r28
    260a:	e7 5a       	subi	r30, 0xA7	; 167
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	91 83       	std	Z+1, r25	; 0x01
    2614:	80 83       	st	Z, r24
    2616:	64 c0       	rjmp	.+200    	; 0x26e0 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2618:	fe 01       	movw	r30, r28
    261a:	e5 5a       	subi	r30, 0xA5	; 165
    261c:	ff 4f       	sbci	r31, 0xFF	; 255
    261e:	60 81       	ld	r22, Z
    2620:	71 81       	ldd	r23, Z+1	; 0x01
    2622:	82 81       	ldd	r24, Z+2	; 0x02
    2624:	93 81       	ldd	r25, Z+3	; 0x03
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	3f ef       	ldi	r19, 0xFF	; 255
    262a:	4f e7       	ldi	r20, 0x7F	; 127
    262c:	57 e4       	ldi	r21, 0x47	; 71
    262e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2632:	18 16       	cp	r1, r24
    2634:	0c f0       	brlt	.+2      	; 0x2638 <LCD_displayCharacter+0xbe>
    2636:	43 c0       	rjmp	.+134    	; 0x26be <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2638:	fe 01       	movw	r30, r28
    263a:	e1 5a       	subi	r30, 0xA1	; 161
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	60 81       	ld	r22, Z
    2640:	71 81       	ldd	r23, Z+1	; 0x01
    2642:	82 81       	ldd	r24, Z+2	; 0x02
    2644:	93 81       	ldd	r25, Z+3	; 0x03
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	40 e2       	ldi	r20, 0x20	; 32
    264c:	51 e4       	ldi	r21, 0x41	; 65
    264e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	8e 01       	movw	r16, r28
    2658:	07 5a       	subi	r16, 0xA7	; 167
    265a:	1f 4f       	sbci	r17, 0xFF	; 255
    265c:	bc 01       	movw	r22, r24
    265e:	cd 01       	movw	r24, r26
    2660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	f8 01       	movw	r30, r16
    266a:	91 83       	std	Z+1, r25	; 0x01
    266c:	80 83       	st	Z, r24
    266e:	1f c0       	rjmp	.+62     	; 0x26ae <LCD_displayCharacter+0x134>
    2670:	fe 01       	movw	r30, r28
    2672:	e9 5a       	subi	r30, 0xA9	; 169
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	80 e9       	ldi	r24, 0x90	; 144
    2678:	91 e0       	ldi	r25, 0x01	; 1
    267a:	91 83       	std	Z+1, r25	; 0x01
    267c:	80 83       	st	Z, r24
    267e:	fe 01       	movw	r30, r28
    2680:	e9 5a       	subi	r30, 0xA9	; 169
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	80 81       	ld	r24, Z
    2686:	91 81       	ldd	r25, Z+1	; 0x01
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	f1 f7       	brne	.-4      	; 0x2688 <LCD_displayCharacter+0x10e>
    268c:	fe 01       	movw	r30, r28
    268e:	e9 5a       	subi	r30, 0xA9	; 169
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	91 83       	std	Z+1, r25	; 0x01
    2694:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2696:	de 01       	movw	r26, r28
    2698:	a7 5a       	subi	r26, 0xA7	; 167
    269a:	bf 4f       	sbci	r27, 0xFF	; 255
    269c:	fe 01       	movw	r30, r28
    269e:	e7 5a       	subi	r30, 0xA7	; 167
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	80 81       	ld	r24, Z
    26a4:	91 81       	ldd	r25, Z+1	; 0x01
    26a6:	01 97       	sbiw	r24, 0x01	; 1
    26a8:	11 96       	adiw	r26, 0x01	; 1
    26aa:	9c 93       	st	X, r25
    26ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ae:	fe 01       	movw	r30, r28
    26b0:	e7 5a       	subi	r30, 0xA7	; 167
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	80 81       	ld	r24, Z
    26b6:	91 81       	ldd	r25, Z+1	; 0x01
    26b8:	00 97       	sbiw	r24, 0x00	; 0
    26ba:	d1 f6       	brne	.-76     	; 0x2670 <LCD_displayCharacter+0xf6>
    26bc:	27 c0       	rjmp	.+78     	; 0x270c <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26be:	8e 01       	movw	r16, r28
    26c0:	07 5a       	subi	r16, 0xA7	; 167
    26c2:	1f 4f       	sbci	r17, 0xFF	; 255
    26c4:	fe 01       	movw	r30, r28
    26c6:	e5 5a       	subi	r30, 0xA5	; 165
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	60 81       	ld	r22, Z
    26cc:	71 81       	ldd	r23, Z+1	; 0x01
    26ce:	82 81       	ldd	r24, Z+2	; 0x02
    26d0:	93 81       	ldd	r25, Z+3	; 0x03
    26d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	f8 01       	movw	r30, r16
    26dc:	91 83       	std	Z+1, r25	; 0x01
    26de:	80 83       	st	Z, r24
    26e0:	de 01       	movw	r26, r28
    26e2:	ab 5a       	subi	r26, 0xAB	; 171
    26e4:	bf 4f       	sbci	r27, 0xFF	; 255
    26e6:	fe 01       	movw	r30, r28
    26e8:	e7 5a       	subi	r30, 0xA7	; 167
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	80 81       	ld	r24, Z
    26ee:	91 81       	ldd	r25, Z+1	; 0x01
    26f0:	8d 93       	st	X+, r24
    26f2:	9c 93       	st	X, r25
    26f4:	fe 01       	movw	r30, r28
    26f6:	eb 5a       	subi	r30, 0xAB	; 171
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	80 81       	ld	r24, Z
    26fc:	91 81       	ldd	r25, Z+1	; 0x01
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	f1 f7       	brne	.-4      	; 0x26fe <LCD_displayCharacter+0x184>
    2702:	fe 01       	movw	r30, r28
    2704:	eb 5a       	subi	r30, 0xAB	; 171
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	91 83       	std	Z+1, r25	; 0x01
    270a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	62 e0       	ldi	r22, 0x02	; 2
    2710:	41 e0       	ldi	r20, 0x01	; 1
    2712:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
    2716:	fe 01       	movw	r30, r28
    2718:	ef 5a       	subi	r30, 0xAF	; 175
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	a0 e8       	ldi	r26, 0x80	; 128
    2722:	bf e3       	ldi	r27, 0x3F	; 63
    2724:	80 83       	st	Z, r24
    2726:	91 83       	std	Z+1, r25	; 0x01
    2728:	a2 83       	std	Z+2, r26	; 0x02
    272a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    272c:	8e 01       	movw	r16, r28
    272e:	03 5b       	subi	r16, 0xB3	; 179
    2730:	1f 4f       	sbci	r17, 0xFF	; 255
    2732:	fe 01       	movw	r30, r28
    2734:	ef 5a       	subi	r30, 0xAF	; 175
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	60 81       	ld	r22, Z
    273a:	71 81       	ldd	r23, Z+1	; 0x01
    273c:	82 81       	ldd	r24, Z+2	; 0x02
    273e:	93 81       	ldd	r25, Z+3	; 0x03
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	4a e7       	ldi	r20, 0x7A	; 122
    2746:	55 e4       	ldi	r21, 0x45	; 69
    2748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	f8 01       	movw	r30, r16
    2752:	80 83       	st	Z, r24
    2754:	91 83       	std	Z+1, r25	; 0x01
    2756:	a2 83       	std	Z+2, r26	; 0x02
    2758:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    275a:	fe 01       	movw	r30, r28
    275c:	e3 5b       	subi	r30, 0xB3	; 179
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	60 81       	ld	r22, Z
    2762:	71 81       	ldd	r23, Z+1	; 0x01
    2764:	82 81       	ldd	r24, Z+2	; 0x02
    2766:	93 81       	ldd	r25, Z+3	; 0x03
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	40 e8       	ldi	r20, 0x80	; 128
    276e:	5f e3       	ldi	r21, 0x3F	; 63
    2770:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2774:	88 23       	and	r24, r24
    2776:	44 f4       	brge	.+16     	; 0x2788 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2778:	fe 01       	movw	r30, r28
    277a:	e5 5b       	subi	r30, 0xB5	; 181
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	91 83       	std	Z+1, r25	; 0x01
    2784:	80 83       	st	Z, r24
    2786:	64 c0       	rjmp	.+200    	; 0x2850 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2788:	fe 01       	movw	r30, r28
    278a:	e3 5b       	subi	r30, 0xB3	; 179
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	60 81       	ld	r22, Z
    2790:	71 81       	ldd	r23, Z+1	; 0x01
    2792:	82 81       	ldd	r24, Z+2	; 0x02
    2794:	93 81       	ldd	r25, Z+3	; 0x03
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	3f ef       	ldi	r19, 0xFF	; 255
    279a:	4f e7       	ldi	r20, 0x7F	; 127
    279c:	57 e4       	ldi	r21, 0x47	; 71
    279e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27a2:	18 16       	cp	r1, r24
    27a4:	0c f0       	brlt	.+2      	; 0x27a8 <LCD_displayCharacter+0x22e>
    27a6:	43 c0       	rjmp	.+134    	; 0x282e <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a8:	fe 01       	movw	r30, r28
    27aa:	ef 5a       	subi	r30, 0xAF	; 175
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	60 81       	ld	r22, Z
    27b0:	71 81       	ldd	r23, Z+1	; 0x01
    27b2:	82 81       	ldd	r24, Z+2	; 0x02
    27b4:	93 81       	ldd	r25, Z+3	; 0x03
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	40 e2       	ldi	r20, 0x20	; 32
    27bc:	51 e4       	ldi	r21, 0x41	; 65
    27be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	8e 01       	movw	r16, r28
    27c8:	05 5b       	subi	r16, 0xB5	; 181
    27ca:	1f 4f       	sbci	r17, 0xFF	; 255
    27cc:	bc 01       	movw	r22, r24
    27ce:	cd 01       	movw	r24, r26
    27d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	f8 01       	movw	r30, r16
    27da:	91 83       	std	Z+1, r25	; 0x01
    27dc:	80 83       	st	Z, r24
    27de:	1f c0       	rjmp	.+62     	; 0x281e <LCD_displayCharacter+0x2a4>
    27e0:	fe 01       	movw	r30, r28
    27e2:	e7 5b       	subi	r30, 0xB7	; 183
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	80 e9       	ldi	r24, 0x90	; 144
    27e8:	91 e0       	ldi	r25, 0x01	; 1
    27ea:	91 83       	std	Z+1, r25	; 0x01
    27ec:	80 83       	st	Z, r24
    27ee:	fe 01       	movw	r30, r28
    27f0:	e7 5b       	subi	r30, 0xB7	; 183
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	80 81       	ld	r24, Z
    27f6:	91 81       	ldd	r25, Z+1	; 0x01
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	f1 f7       	brne	.-4      	; 0x27f8 <LCD_displayCharacter+0x27e>
    27fc:	fe 01       	movw	r30, r28
    27fe:	e7 5b       	subi	r30, 0xB7	; 183
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	91 83       	std	Z+1, r25	; 0x01
    2804:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2806:	de 01       	movw	r26, r28
    2808:	a5 5b       	subi	r26, 0xB5	; 181
    280a:	bf 4f       	sbci	r27, 0xFF	; 255
    280c:	fe 01       	movw	r30, r28
    280e:	e5 5b       	subi	r30, 0xB5	; 181
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	80 81       	ld	r24, Z
    2814:	91 81       	ldd	r25, Z+1	; 0x01
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	11 96       	adiw	r26, 0x01	; 1
    281a:	9c 93       	st	X, r25
    281c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281e:	fe 01       	movw	r30, r28
    2820:	e5 5b       	subi	r30, 0xB5	; 181
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	80 81       	ld	r24, Z
    2826:	91 81       	ldd	r25, Z+1	; 0x01
    2828:	00 97       	sbiw	r24, 0x00	; 0
    282a:	d1 f6       	brne	.-76     	; 0x27e0 <LCD_displayCharacter+0x266>
    282c:	27 c0       	rjmp	.+78     	; 0x287c <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    282e:	8e 01       	movw	r16, r28
    2830:	05 5b       	subi	r16, 0xB5	; 181
    2832:	1f 4f       	sbci	r17, 0xFF	; 255
    2834:	fe 01       	movw	r30, r28
    2836:	e3 5b       	subi	r30, 0xB3	; 179
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	60 81       	ld	r22, Z
    283c:	71 81       	ldd	r23, Z+1	; 0x01
    283e:	82 81       	ldd	r24, Z+2	; 0x02
    2840:	93 81       	ldd	r25, Z+3	; 0x03
    2842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	f8 01       	movw	r30, r16
    284c:	91 83       	std	Z+1, r25	; 0x01
    284e:	80 83       	st	Z, r24
    2850:	de 01       	movw	r26, r28
    2852:	a9 5b       	subi	r26, 0xB9	; 185
    2854:	bf 4f       	sbci	r27, 0xFF	; 255
    2856:	fe 01       	movw	r30, r28
    2858:	e5 5b       	subi	r30, 0xB5	; 181
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	80 81       	ld	r24, Z
    285e:	91 81       	ldd	r25, Z+1	; 0x01
    2860:	8d 93       	st	X+, r24
    2862:	9c 93       	st	X, r25
    2864:	fe 01       	movw	r30, r28
    2866:	e9 5b       	subi	r30, 0xB9	; 185
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	80 81       	ld	r24, Z
    286c:	91 81       	ldd	r25, Z+1	; 0x01
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	f1 f7       	brne	.-4      	; 0x286e <LCD_displayCharacter+0x2f4>
    2872:	fe 01       	movw	r30, r28
    2874:	e9 5b       	subi	r30, 0xB9	; 185
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	91 83       	std	Z+1, r25	; 0x01
    287a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    287c:	fe 01       	movw	r30, r28
    287e:	ed 59       	subi	r30, 0x9D	; 157
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	80 81       	ld	r24, Z
    2884:	88 2f       	mov	r24, r24
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	80 71       	andi	r24, 0x10	; 16
    288a:	90 70       	andi	r25, 0x00	; 0
    288c:	95 95       	asr	r25
    288e:	87 95       	ror	r24
    2890:	95 95       	asr	r25
    2892:	87 95       	ror	r24
    2894:	95 95       	asr	r25
    2896:	87 95       	ror	r24
    2898:	95 95       	asr	r25
    289a:	87 95       	ror	r24
    289c:	98 2f       	mov	r25, r24
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	63 e0       	ldi	r22, 0x03	; 3
    28a2:	49 2f       	mov	r20, r25
    28a4:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    28a8:	fe 01       	movw	r30, r28
    28aa:	ed 59       	subi	r30, 0x9D	; 157
    28ac:	ff 4f       	sbci	r31, 0xFF	; 255
    28ae:	80 81       	ld	r24, Z
    28b0:	88 2f       	mov	r24, r24
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	80 72       	andi	r24, 0x20	; 32
    28b6:	90 70       	andi	r25, 0x00	; 0
    28b8:	95 95       	asr	r25
    28ba:	87 95       	ror	r24
    28bc:	95 95       	asr	r25
    28be:	87 95       	ror	r24
    28c0:	95 95       	asr	r25
    28c2:	87 95       	ror	r24
    28c4:	95 95       	asr	r25
    28c6:	87 95       	ror	r24
    28c8:	95 95       	asr	r25
    28ca:	87 95       	ror	r24
    28cc:	98 2f       	mov	r25, r24
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	64 e0       	ldi	r22, 0x04	; 4
    28d2:	49 2f       	mov	r20, r25
    28d4:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    28d8:	fe 01       	movw	r30, r28
    28da:	ed 59       	subi	r30, 0x9D	; 157
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	80 81       	ld	r24, Z
    28e0:	88 2f       	mov	r24, r24
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	80 74       	andi	r24, 0x40	; 64
    28e6:	90 70       	andi	r25, 0x00	; 0
    28e8:	08 2e       	mov	r0, r24
    28ea:	89 2f       	mov	r24, r25
    28ec:	00 0c       	add	r0, r0
    28ee:	88 1f       	adc	r24, r24
    28f0:	99 0b       	sbc	r25, r25
    28f2:	00 0c       	add	r0, r0
    28f4:	88 1f       	adc	r24, r24
    28f6:	99 1f       	adc	r25, r25
    28f8:	98 2f       	mov	r25, r24
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	65 e0       	ldi	r22, 0x05	; 5
    28fe:	49 2f       	mov	r20, r25
    2900:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2904:	fe 01       	movw	r30, r28
    2906:	ed 59       	subi	r30, 0x9D	; 157
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	80 81       	ld	r24, Z
    290c:	98 2f       	mov	r25, r24
    290e:	99 1f       	adc	r25, r25
    2910:	99 27       	eor	r25, r25
    2912:	99 1f       	adc	r25, r25
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	66 e0       	ldi	r22, 0x06	; 6
    2918:	49 2f       	mov	r20, r25
    291a:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
    291e:	fe 01       	movw	r30, r28
    2920:	ed 5b       	subi	r30, 0xBD	; 189
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	a0 e8       	ldi	r26, 0x80	; 128
    292a:	bf e3       	ldi	r27, 0x3F	; 63
    292c:	80 83       	st	Z, r24
    292e:	91 83       	std	Z+1, r25	; 0x01
    2930:	a2 83       	std	Z+2, r26	; 0x02
    2932:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2934:	8e 01       	movw	r16, r28
    2936:	01 5c       	subi	r16, 0xC1	; 193
    2938:	1f 4f       	sbci	r17, 0xFF	; 255
    293a:	fe 01       	movw	r30, r28
    293c:	ed 5b       	subi	r30, 0xBD	; 189
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	60 81       	ld	r22, Z
    2942:	71 81       	ldd	r23, Z+1	; 0x01
    2944:	82 81       	ldd	r24, Z+2	; 0x02
    2946:	93 81       	ldd	r25, Z+3	; 0x03
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	4a e7       	ldi	r20, 0x7A	; 122
    294e:	55 e4       	ldi	r21, 0x45	; 69
    2950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	f8 01       	movw	r30, r16
    295a:	80 83       	st	Z, r24
    295c:	91 83       	std	Z+1, r25	; 0x01
    295e:	a2 83       	std	Z+2, r26	; 0x02
    2960:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2962:	fe 01       	movw	r30, r28
    2964:	ff 96       	adiw	r30, 0x3f	; 63
    2966:	60 81       	ld	r22, Z
    2968:	71 81       	ldd	r23, Z+1	; 0x01
    296a:	82 81       	ldd	r24, Z+2	; 0x02
    296c:	93 81       	ldd	r25, Z+3	; 0x03
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e8       	ldi	r20, 0x80	; 128
    2974:	5f e3       	ldi	r21, 0x3F	; 63
    2976:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    297a:	88 23       	and	r24, r24
    297c:	2c f4       	brge	.+10     	; 0x2988 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	9e af       	std	Y+62, r25	; 0x3e
    2984:	8d af       	std	Y+61, r24	; 0x3d
    2986:	46 c0       	rjmp	.+140    	; 0x2a14 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2988:	fe 01       	movw	r30, r28
    298a:	ff 96       	adiw	r30, 0x3f	; 63
    298c:	60 81       	ld	r22, Z
    298e:	71 81       	ldd	r23, Z+1	; 0x01
    2990:	82 81       	ldd	r24, Z+2	; 0x02
    2992:	93 81       	ldd	r25, Z+3	; 0x03
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	3f ef       	ldi	r19, 0xFF	; 255
    2998:	4f e7       	ldi	r20, 0x7F	; 127
    299a:	57 e4       	ldi	r21, 0x47	; 71
    299c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29a0:	18 16       	cp	r1, r24
    29a2:	64 f5       	brge	.+88     	; 0x29fc <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a4:	fe 01       	movw	r30, r28
    29a6:	ed 5b       	subi	r30, 0xBD	; 189
    29a8:	ff 4f       	sbci	r31, 0xFF	; 255
    29aa:	60 81       	ld	r22, Z
    29ac:	71 81       	ldd	r23, Z+1	; 0x01
    29ae:	82 81       	ldd	r24, Z+2	; 0x02
    29b0:	93 81       	ldd	r25, Z+3	; 0x03
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	40 e2       	ldi	r20, 0x20	; 32
    29b8:	51 e4       	ldi	r21, 0x41	; 65
    29ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	bc 01       	movw	r22, r24
    29c4:	cd 01       	movw	r24, r26
    29c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	9e af       	std	Y+62, r25	; 0x3e
    29d0:	8d af       	std	Y+61, r24	; 0x3d
    29d2:	0f c0       	rjmp	.+30     	; 0x29f2 <LCD_displayCharacter+0x478>
    29d4:	80 e9       	ldi	r24, 0x90	; 144
    29d6:	91 e0       	ldi	r25, 0x01	; 1
    29d8:	9c af       	std	Y+60, r25	; 0x3c
    29da:	8b af       	std	Y+59, r24	; 0x3b
    29dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    29de:	9c ad       	ldd	r25, Y+60	; 0x3c
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	f1 f7       	brne	.-4      	; 0x29e0 <LCD_displayCharacter+0x466>
    29e4:	9c af       	std	Y+60, r25	; 0x3c
    29e6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    29ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    29ec:	01 97       	sbiw	r24, 0x01	; 1
    29ee:	9e af       	std	Y+62, r25	; 0x3e
    29f0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    29f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    29f6:	00 97       	sbiw	r24, 0x00	; 0
    29f8:	69 f7       	brne	.-38     	; 0x29d4 <LCD_displayCharacter+0x45a>
    29fa:	16 c0       	rjmp	.+44     	; 0x2a28 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29fc:	fe 01       	movw	r30, r28
    29fe:	ff 96       	adiw	r30, 0x3f	; 63
    2a00:	60 81       	ld	r22, Z
    2a02:	71 81       	ldd	r23, Z+1	; 0x01
    2a04:	82 81       	ldd	r24, Z+2	; 0x02
    2a06:	93 81       	ldd	r25, Z+3	; 0x03
    2a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	9e af       	std	Y+62, r25	; 0x3e
    2a12:	8d af       	std	Y+61, r24	; 0x3d
    2a14:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a16:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a18:	9a af       	std	Y+58, r25	; 0x3a
    2a1a:	89 af       	std	Y+57, r24	; 0x39
    2a1c:	89 ad       	ldd	r24, Y+57	; 0x39
    2a1e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	f1 f7       	brne	.-4      	; 0x2a20 <LCD_displayCharacter+0x4a6>
    2a24:	9a af       	std	Y+58, r25	; 0x3a
    2a26:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	62 e0       	ldi	r22, 0x02	; 2
    2a2c:	40 e0       	ldi	r20, 0x00	; 0
    2a2e:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	a0 e8       	ldi	r26, 0x80	; 128
    2a38:	bf e3       	ldi	r27, 0x3F	; 63
    2a3a:	8d ab       	std	Y+53, r24	; 0x35
    2a3c:	9e ab       	std	Y+54, r25	; 0x36
    2a3e:	af ab       	std	Y+55, r26	; 0x37
    2a40:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a42:	6d a9       	ldd	r22, Y+53	; 0x35
    2a44:	7e a9       	ldd	r23, Y+54	; 0x36
    2a46:	8f a9       	ldd	r24, Y+55	; 0x37
    2a48:	98 ad       	ldd	r25, Y+56	; 0x38
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	4a e7       	ldi	r20, 0x7A	; 122
    2a50:	55 e4       	ldi	r21, 0x45	; 69
    2a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	89 ab       	std	Y+49, r24	; 0x31
    2a5c:	9a ab       	std	Y+50, r25	; 0x32
    2a5e:	ab ab       	std	Y+51, r26	; 0x33
    2a60:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a62:	69 a9       	ldd	r22, Y+49	; 0x31
    2a64:	7a a9       	ldd	r23, Y+50	; 0x32
    2a66:	8b a9       	ldd	r24, Y+51	; 0x33
    2a68:	9c a9       	ldd	r25, Y+52	; 0x34
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	40 e8       	ldi	r20, 0x80	; 128
    2a70:	5f e3       	ldi	r21, 0x3F	; 63
    2a72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a76:	88 23       	and	r24, r24
    2a78:	2c f4       	brge	.+10     	; 0x2a84 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	98 ab       	std	Y+48, r25	; 0x30
    2a80:	8f a7       	std	Y+47, r24	; 0x2f
    2a82:	3f c0       	rjmp	.+126    	; 0x2b02 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2a84:	69 a9       	ldd	r22, Y+49	; 0x31
    2a86:	7a a9       	ldd	r23, Y+50	; 0x32
    2a88:	8b a9       	ldd	r24, Y+51	; 0x33
    2a8a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	3f ef       	ldi	r19, 0xFF	; 255
    2a90:	4f e7       	ldi	r20, 0x7F	; 127
    2a92:	57 e4       	ldi	r21, 0x47	; 71
    2a94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a98:	18 16       	cp	r1, r24
    2a9a:	4c f5       	brge	.+82     	; 0x2aee <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a9c:	6d a9       	ldd	r22, Y+53	; 0x35
    2a9e:	7e a9       	ldd	r23, Y+54	; 0x36
    2aa0:	8f a9       	ldd	r24, Y+55	; 0x37
    2aa2:	98 ad       	ldd	r25, Y+56	; 0x38
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	40 e2       	ldi	r20, 0x20	; 32
    2aaa:	51 e4       	ldi	r21, 0x41	; 65
    2aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	bc 01       	movw	r22, r24
    2ab6:	cd 01       	movw	r24, r26
    2ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2abc:	dc 01       	movw	r26, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	98 ab       	std	Y+48, r25	; 0x30
    2ac2:	8f a7       	std	Y+47, r24	; 0x2f
    2ac4:	0f c0       	rjmp	.+30     	; 0x2ae4 <LCD_displayCharacter+0x56a>
    2ac6:	80 e9       	ldi	r24, 0x90	; 144
    2ac8:	91 e0       	ldi	r25, 0x01	; 1
    2aca:	9e a7       	std	Y+46, r25	; 0x2e
    2acc:	8d a7       	std	Y+45, r24	; 0x2d
    2ace:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ad0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ad2:	01 97       	sbiw	r24, 0x01	; 1
    2ad4:	f1 f7       	brne	.-4      	; 0x2ad2 <LCD_displayCharacter+0x558>
    2ad6:	9e a7       	std	Y+46, r25	; 0x2e
    2ad8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ada:	8f a5       	ldd	r24, Y+47	; 0x2f
    2adc:	98 a9       	ldd	r25, Y+48	; 0x30
    2ade:	01 97       	sbiw	r24, 0x01	; 1
    2ae0:	98 ab       	std	Y+48, r25	; 0x30
    2ae2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ae6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ae8:	00 97       	sbiw	r24, 0x00	; 0
    2aea:	69 f7       	brne	.-38     	; 0x2ac6 <LCD_displayCharacter+0x54c>
    2aec:	14 c0       	rjmp	.+40     	; 0x2b16 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aee:	69 a9       	ldd	r22, Y+49	; 0x31
    2af0:	7a a9       	ldd	r23, Y+50	; 0x32
    2af2:	8b a9       	ldd	r24, Y+51	; 0x33
    2af4:	9c a9       	ldd	r25, Y+52	; 0x34
    2af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	98 ab       	std	Y+48, r25	; 0x30
    2b00:	8f a7       	std	Y+47, r24	; 0x2f
    2b02:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b04:	98 a9       	ldd	r25, Y+48	; 0x30
    2b06:	9c a7       	std	Y+44, r25	; 0x2c
    2b08:	8b a7       	std	Y+43, r24	; 0x2b
    2b0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	f1 f7       	brne	.-4      	; 0x2b0e <LCD_displayCharacter+0x594>
    2b12:	9c a7       	std	Y+44, r25	; 0x2c
    2b14:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2b16:	80 e0       	ldi	r24, 0x00	; 0
    2b18:	62 e0       	ldi	r22, 0x02	; 2
    2b1a:	41 e0       	ldi	r20, 0x01	; 1
    2b1c:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	a0 e8       	ldi	r26, 0x80	; 128
    2b26:	bf e3       	ldi	r27, 0x3F	; 63
    2b28:	8f a3       	std	Y+39, r24	; 0x27
    2b2a:	98 a7       	std	Y+40, r25	; 0x28
    2b2c:	a9 a7       	std	Y+41, r26	; 0x29
    2b2e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b30:	6f a1       	ldd	r22, Y+39	; 0x27
    2b32:	78 a5       	ldd	r23, Y+40	; 0x28
    2b34:	89 a5       	ldd	r24, Y+41	; 0x29
    2b36:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	4a e7       	ldi	r20, 0x7A	; 122
    2b3e:	55 e4       	ldi	r21, 0x45	; 69
    2b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	8b a3       	std	Y+35, r24	; 0x23
    2b4a:	9c a3       	std	Y+36, r25	; 0x24
    2b4c:	ad a3       	std	Y+37, r26	; 0x25
    2b4e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b50:	6b a1       	ldd	r22, Y+35	; 0x23
    2b52:	7c a1       	ldd	r23, Y+36	; 0x24
    2b54:	8d a1       	ldd	r24, Y+37	; 0x25
    2b56:	9e a1       	ldd	r25, Y+38	; 0x26
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	40 e8       	ldi	r20, 0x80	; 128
    2b5e:	5f e3       	ldi	r21, 0x3F	; 63
    2b60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b64:	88 23       	and	r24, r24
    2b66:	2c f4       	brge	.+10     	; 0x2b72 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	9a a3       	std	Y+34, r25	; 0x22
    2b6e:	89 a3       	std	Y+33, r24	; 0x21
    2b70:	3f c0       	rjmp	.+126    	; 0x2bf0 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2b72:	6b a1       	ldd	r22, Y+35	; 0x23
    2b74:	7c a1       	ldd	r23, Y+36	; 0x24
    2b76:	8d a1       	ldd	r24, Y+37	; 0x25
    2b78:	9e a1       	ldd	r25, Y+38	; 0x26
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	3f ef       	ldi	r19, 0xFF	; 255
    2b7e:	4f e7       	ldi	r20, 0x7F	; 127
    2b80:	57 e4       	ldi	r21, 0x47	; 71
    2b82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b86:	18 16       	cp	r1, r24
    2b88:	4c f5       	brge	.+82     	; 0x2bdc <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b8a:	6f a1       	ldd	r22, Y+39	; 0x27
    2b8c:	78 a5       	ldd	r23, Y+40	; 0x28
    2b8e:	89 a5       	ldd	r24, Y+41	; 0x29
    2b90:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e2       	ldi	r20, 0x20	; 32
    2b98:	51 e4       	ldi	r21, 0x41	; 65
    2b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	bc 01       	movw	r22, r24
    2ba4:	cd 01       	movw	r24, r26
    2ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	9a a3       	std	Y+34, r25	; 0x22
    2bb0:	89 a3       	std	Y+33, r24	; 0x21
    2bb2:	0f c0       	rjmp	.+30     	; 0x2bd2 <LCD_displayCharacter+0x658>
    2bb4:	80 e9       	ldi	r24, 0x90	; 144
    2bb6:	91 e0       	ldi	r25, 0x01	; 1
    2bb8:	98 a3       	std	Y+32, r25	; 0x20
    2bba:	8f 8f       	std	Y+31, r24	; 0x1f
    2bbc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bbe:	98 a1       	ldd	r25, Y+32	; 0x20
    2bc0:	01 97       	sbiw	r24, 0x01	; 1
    2bc2:	f1 f7       	brne	.-4      	; 0x2bc0 <LCD_displayCharacter+0x646>
    2bc4:	98 a3       	std	Y+32, r25	; 0x20
    2bc6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc8:	89 a1       	ldd	r24, Y+33	; 0x21
    2bca:	9a a1       	ldd	r25, Y+34	; 0x22
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	9a a3       	std	Y+34, r25	; 0x22
    2bd0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd2:	89 a1       	ldd	r24, Y+33	; 0x21
    2bd4:	9a a1       	ldd	r25, Y+34	; 0x22
    2bd6:	00 97       	sbiw	r24, 0x00	; 0
    2bd8:	69 f7       	brne	.-38     	; 0x2bb4 <LCD_displayCharacter+0x63a>
    2bda:	14 c0       	rjmp	.+40     	; 0x2c04 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bdc:	6b a1       	ldd	r22, Y+35	; 0x23
    2bde:	7c a1       	ldd	r23, Y+36	; 0x24
    2be0:	8d a1       	ldd	r24, Y+37	; 0x25
    2be2:	9e a1       	ldd	r25, Y+38	; 0x26
    2be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	9a a3       	std	Y+34, r25	; 0x22
    2bee:	89 a3       	std	Y+33, r24	; 0x21
    2bf0:	89 a1       	ldd	r24, Y+33	; 0x21
    2bf2:	9a a1       	ldd	r25, Y+34	; 0x22
    2bf4:	9e 8f       	std	Y+30, r25	; 0x1e
    2bf6:	8d 8f       	std	Y+29, r24	; 0x1d
    2bf8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bfa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	f1 f7       	brne	.-4      	; 0x2bfc <LCD_displayCharacter+0x682>
    2c00:	9e 8f       	std	Y+30, r25	; 0x1e
    2c02:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2c04:	fe 01       	movw	r30, r28
    2c06:	ed 59       	subi	r30, 0x9D	; 157
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	80 81       	ld	r24, Z
    2c0c:	98 2f       	mov	r25, r24
    2c0e:	91 70       	andi	r25, 0x01	; 1
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	63 e0       	ldi	r22, 0x03	; 3
    2c14:	49 2f       	mov	r20, r25
    2c16:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	ed 59       	subi	r30, 0x9D	; 157
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	80 81       	ld	r24, Z
    2c22:	88 2f       	mov	r24, r24
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	82 70       	andi	r24, 0x02	; 2
    2c28:	90 70       	andi	r25, 0x00	; 0
    2c2a:	95 95       	asr	r25
    2c2c:	87 95       	ror	r24
    2c2e:	98 2f       	mov	r25, r24
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	64 e0       	ldi	r22, 0x04	; 4
    2c34:	49 2f       	mov	r20, r25
    2c36:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2c3a:	fe 01       	movw	r30, r28
    2c3c:	ed 59       	subi	r30, 0x9D	; 157
    2c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c40:	80 81       	ld	r24, Z
    2c42:	88 2f       	mov	r24, r24
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	84 70       	andi	r24, 0x04	; 4
    2c48:	90 70       	andi	r25, 0x00	; 0
    2c4a:	95 95       	asr	r25
    2c4c:	87 95       	ror	r24
    2c4e:	95 95       	asr	r25
    2c50:	87 95       	ror	r24
    2c52:	98 2f       	mov	r25, r24
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	65 e0       	ldi	r22, 0x05	; 5
    2c58:	49 2f       	mov	r20, r25
    2c5a:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2c5e:	fe 01       	movw	r30, r28
    2c60:	ed 59       	subi	r30, 0x9D	; 157
    2c62:	ff 4f       	sbci	r31, 0xFF	; 255
    2c64:	80 81       	ld	r24, Z
    2c66:	88 2f       	mov	r24, r24
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	88 70       	andi	r24, 0x08	; 8
    2c6c:	90 70       	andi	r25, 0x00	; 0
    2c6e:	95 95       	asr	r25
    2c70:	87 95       	ror	r24
    2c72:	95 95       	asr	r25
    2c74:	87 95       	ror	r24
    2c76:	95 95       	asr	r25
    2c78:	87 95       	ror	r24
    2c7a:	98 2f       	mov	r25, r24
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	66 e0       	ldi	r22, 0x06	; 6
    2c80:	49 2f       	mov	r20, r25
    2c82:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	a0 e8       	ldi	r26, 0x80	; 128
    2c8c:	bf e3       	ldi	r27, 0x3F	; 63
    2c8e:	89 8f       	std	Y+25, r24	; 0x19
    2c90:	9a 8f       	std	Y+26, r25	; 0x1a
    2c92:	ab 8f       	std	Y+27, r26	; 0x1b
    2c94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c96:	69 8d       	ldd	r22, Y+25	; 0x19
    2c98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	4a e7       	ldi	r20, 0x7A	; 122
    2ca4:	55 e4       	ldi	r21, 0x45	; 69
    2ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	8d 8b       	std	Y+21, r24	; 0x15
    2cb0:	9e 8b       	std	Y+22, r25	; 0x16
    2cb2:	af 8b       	std	Y+23, r26	; 0x17
    2cb4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cb6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cb8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cba:	8f 89       	ldd	r24, Y+23	; 0x17
    2cbc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	40 e8       	ldi	r20, 0x80	; 128
    2cc4:	5f e3       	ldi	r21, 0x3F	; 63
    2cc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cca:	88 23       	and	r24, r24
    2ccc:	2c f4       	brge	.+10     	; 0x2cd8 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	9c 8b       	std	Y+20, r25	; 0x14
    2cd4:	8b 8b       	std	Y+19, r24	; 0x13
    2cd6:	3f c0       	rjmp	.+126    	; 0x2d56 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2cd8:	6d 89       	ldd	r22, Y+21	; 0x15
    2cda:	7e 89       	ldd	r23, Y+22	; 0x16
    2cdc:	8f 89       	ldd	r24, Y+23	; 0x17
    2cde:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	3f ef       	ldi	r19, 0xFF	; 255
    2ce4:	4f e7       	ldi	r20, 0x7F	; 127
    2ce6:	57 e4       	ldi	r21, 0x47	; 71
    2ce8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cec:	18 16       	cp	r1, r24
    2cee:	4c f5       	brge	.+82     	; 0x2d42 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf0:	69 8d       	ldd	r22, Y+25	; 0x19
    2cf2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cf6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	40 e2       	ldi	r20, 0x20	; 32
    2cfe:	51 e4       	ldi	r21, 0x41	; 65
    2d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	bc 01       	movw	r22, r24
    2d0a:	cd 01       	movw	r24, r26
    2d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	9c 8b       	std	Y+20, r25	; 0x14
    2d16:	8b 8b       	std	Y+19, r24	; 0x13
    2d18:	0f c0       	rjmp	.+30     	; 0x2d38 <LCD_displayCharacter+0x7be>
    2d1a:	80 e9       	ldi	r24, 0x90	; 144
    2d1c:	91 e0       	ldi	r25, 0x01	; 1
    2d1e:	9a 8b       	std	Y+18, r25	; 0x12
    2d20:	89 8b       	std	Y+17, r24	; 0x11
    2d22:	89 89       	ldd	r24, Y+17	; 0x11
    2d24:	9a 89       	ldd	r25, Y+18	; 0x12
    2d26:	01 97       	sbiw	r24, 0x01	; 1
    2d28:	f1 f7       	brne	.-4      	; 0x2d26 <LCD_displayCharacter+0x7ac>
    2d2a:	9a 8b       	std	Y+18, r25	; 0x12
    2d2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d30:	9c 89       	ldd	r25, Y+20	; 0x14
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	9c 8b       	std	Y+20, r25	; 0x14
    2d36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d38:	8b 89       	ldd	r24, Y+19	; 0x13
    2d3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d3c:	00 97       	sbiw	r24, 0x00	; 0
    2d3e:	69 f7       	brne	.-38     	; 0x2d1a <LCD_displayCharacter+0x7a0>
    2d40:	14 c0       	rjmp	.+40     	; 0x2d6a <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d42:	6d 89       	ldd	r22, Y+21	; 0x15
    2d44:	7e 89       	ldd	r23, Y+22	; 0x16
    2d46:	8f 89       	ldd	r24, Y+23	; 0x17
    2d48:	98 8d       	ldd	r25, Y+24	; 0x18
    2d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	cb 01       	movw	r24, r22
    2d52:	9c 8b       	std	Y+20, r25	; 0x14
    2d54:	8b 8b       	std	Y+19, r24	; 0x13
    2d56:	8b 89       	ldd	r24, Y+19	; 0x13
    2d58:	9c 89       	ldd	r25, Y+20	; 0x14
    2d5a:	98 8b       	std	Y+16, r25	; 0x10
    2d5c:	8f 87       	std	Y+15, r24	; 0x0f
    2d5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d60:	98 89       	ldd	r25, Y+16	; 0x10
    2d62:	01 97       	sbiw	r24, 0x01	; 1
    2d64:	f1 f7       	brne	.-4      	; 0x2d62 <LCD_displayCharacter+0x7e8>
    2d66:	98 8b       	std	Y+16, r25	; 0x10
    2d68:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	62 e0       	ldi	r22, 0x02	; 2
    2d6e:	40 e0       	ldi	r20, 0x00	; 0
    2d70:	0e 94 a9 09 	call	0x1352	; 0x1352 <GPIO_writePin>
    2d74:	80 e0       	ldi	r24, 0x00	; 0
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	a0 e8       	ldi	r26, 0x80	; 128
    2d7a:	bf e3       	ldi	r27, 0x3F	; 63
    2d7c:	8b 87       	std	Y+11, r24	; 0x0b
    2d7e:	9c 87       	std	Y+12, r25	; 0x0c
    2d80:	ad 87       	std	Y+13, r26	; 0x0d
    2d82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	4a e7       	ldi	r20, 0x7A	; 122
    2d92:	55 e4       	ldi	r21, 0x45	; 69
    2d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	8f 83       	std	Y+7, r24	; 0x07
    2d9e:	98 87       	std	Y+8, r25	; 0x08
    2da0:	a9 87       	std	Y+9, r26	; 0x09
    2da2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2da4:	6f 81       	ldd	r22, Y+7	; 0x07
    2da6:	78 85       	ldd	r23, Y+8	; 0x08
    2da8:	89 85       	ldd	r24, Y+9	; 0x09
    2daa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	40 e8       	ldi	r20, 0x80	; 128
    2db2:	5f e3       	ldi	r21, 0x3F	; 63
    2db4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2db8:	88 23       	and	r24, r24
    2dba:	2c f4       	brge	.+10     	; 0x2dc6 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	9e 83       	std	Y+6, r25	; 0x06
    2dc2:	8d 83       	std	Y+5, r24	; 0x05
    2dc4:	3f c0       	rjmp	.+126    	; 0x2e44 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2dc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc8:	78 85       	ldd	r23, Y+8	; 0x08
    2dca:	89 85       	ldd	r24, Y+9	; 0x09
    2dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	3f ef       	ldi	r19, 0xFF	; 255
    2dd2:	4f e7       	ldi	r20, 0x7F	; 127
    2dd4:	57 e4       	ldi	r21, 0x47	; 71
    2dd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dda:	18 16       	cp	r1, r24
    2ddc:	4c f5       	brge	.+82     	; 0x2e30 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dde:	6b 85       	ldd	r22, Y+11	; 0x0b
    2de0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2de2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2de4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	40 e2       	ldi	r20, 0x20	; 32
    2dec:	51 e4       	ldi	r21, 0x41	; 65
    2dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	bc 01       	movw	r22, r24
    2df8:	cd 01       	movw	r24, r26
    2dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	9e 83       	std	Y+6, r25	; 0x06
    2e04:	8d 83       	std	Y+5, r24	; 0x05
    2e06:	0f c0       	rjmp	.+30     	; 0x2e26 <LCD_displayCharacter+0x8ac>
    2e08:	80 e9       	ldi	r24, 0x90	; 144
    2e0a:	91 e0       	ldi	r25, 0x01	; 1
    2e0c:	9c 83       	std	Y+4, r25	; 0x04
    2e0e:	8b 83       	std	Y+3, r24	; 0x03
    2e10:	8b 81       	ldd	r24, Y+3	; 0x03
    2e12:	9c 81       	ldd	r25, Y+4	; 0x04
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	f1 f7       	brne	.-4      	; 0x2e14 <LCD_displayCharacter+0x89a>
    2e18:	9c 83       	std	Y+4, r25	; 0x04
    2e1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e20:	01 97       	sbiw	r24, 0x01	; 1
    2e22:	9e 83       	std	Y+6, r25	; 0x06
    2e24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e26:	8d 81       	ldd	r24, Y+5	; 0x05
    2e28:	9e 81       	ldd	r25, Y+6	; 0x06
    2e2a:	00 97       	sbiw	r24, 0x00	; 0
    2e2c:	69 f7       	brne	.-38     	; 0x2e08 <LCD_displayCharacter+0x88e>
    2e2e:	14 c0       	rjmp	.+40     	; 0x2e58 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e30:	6f 81       	ldd	r22, Y+7	; 0x07
    2e32:	78 85       	ldd	r23, Y+8	; 0x08
    2e34:	89 85       	ldd	r24, Y+9	; 0x09
    2e36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	9e 83       	std	Y+6, r25	; 0x06
    2e42:	8d 83       	std	Y+5, r24	; 0x05
    2e44:	8d 81       	ldd	r24, Y+5	; 0x05
    2e46:	9e 81       	ldd	r25, Y+6	; 0x06
    2e48:	9a 83       	std	Y+2, r25	; 0x02
    2e4a:	89 83       	std	Y+1, r24	; 0x01
    2e4c:	89 81       	ldd	r24, Y+1	; 0x01
    2e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e50:	01 97       	sbiw	r24, 0x01	; 1
    2e52:	f1 f7       	brne	.-4      	; 0x2e50 <LCD_displayCharacter+0x8d6>
    2e54:	9a 83       	std	Y+2, r25	; 0x02
    2e56:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2e58:	cd 59       	subi	r28, 0x9D	; 157
    2e5a:	df 4f       	sbci	r29, 0xFF	; 255
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	f8 94       	cli
    2e60:	de bf       	out	0x3e, r29	; 62
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	cd bf       	out	0x3d, r28	; 61
    2e66:	cf 91       	pop	r28
    2e68:	df 91       	pop	r29
    2e6a:	1f 91       	pop	r17
    2e6c:	0f 91       	pop	r16
    2e6e:	08 95       	ret

00002e70 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2e70:	df 93       	push	r29
    2e72:	cf 93       	push	r28
    2e74:	00 d0       	rcall	.+0      	; 0x2e76 <LCD_displayString+0x6>
    2e76:	0f 92       	push	r0
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62
    2e7c:	9b 83       	std	Y+3, r25	; 0x03
    2e7e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e80:	19 82       	std	Y+1, r1	; 0x01
    2e82:	0e c0       	rjmp	.+28     	; 0x2ea0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2e84:	89 81       	ldd	r24, Y+1	; 0x01
    2e86:	28 2f       	mov	r18, r24
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8e:	fc 01       	movw	r30, r24
    2e90:	e2 0f       	add	r30, r18
    2e92:	f3 1f       	adc	r31, r19
    2e94:	80 81       	ld	r24, Z
    2e96:	0e 94 bd 12 	call	0x257a	; 0x257a <LCD_displayCharacter>
		i++;
    2e9a:	89 81       	ldd	r24, Y+1	; 0x01
    2e9c:	8f 5f       	subi	r24, 0xFF	; 255
    2e9e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	28 2f       	mov	r18, r24
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eaa:	fc 01       	movw	r30, r24
    2eac:	e2 0f       	add	r30, r18
    2eae:	f3 1f       	adc	r31, r19
    2eb0:	80 81       	ld	r24, Z
    2eb2:	88 23       	and	r24, r24
    2eb4:	39 f7       	brne	.-50     	; 0x2e84 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2eb6:	0f 90       	pop	r0
    2eb8:	0f 90       	pop	r0
    2eba:	0f 90       	pop	r0
    2ebc:	cf 91       	pop	r28
    2ebe:	df 91       	pop	r29
    2ec0:	08 95       	ret

00002ec2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2ec2:	df 93       	push	r29
    2ec4:	cf 93       	push	r28
    2ec6:	00 d0       	rcall	.+0      	; 0x2ec8 <LCD_moveCursor+0x6>
    2ec8:	00 d0       	rcall	.+0      	; 0x2eca <LCD_moveCursor+0x8>
    2eca:	0f 92       	push	r0
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
    2ed0:	8a 83       	std	Y+2, r24	; 0x02
    2ed2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed6:	28 2f       	mov	r18, r24
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	3d 83       	std	Y+5, r19	; 0x05
    2edc:	2c 83       	std	Y+4, r18	; 0x04
    2ede:	8c 81       	ldd	r24, Y+4	; 0x04
    2ee0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ee2:	81 30       	cpi	r24, 0x01	; 1
    2ee4:	91 05       	cpc	r25, r1
    2ee6:	c1 f0       	breq	.+48     	; 0x2f18 <LCD_moveCursor+0x56>
    2ee8:	2c 81       	ldd	r18, Y+4	; 0x04
    2eea:	3d 81       	ldd	r19, Y+5	; 0x05
    2eec:	22 30       	cpi	r18, 0x02	; 2
    2eee:	31 05       	cpc	r19, r1
    2ef0:	2c f4       	brge	.+10     	; 0x2efc <LCD_moveCursor+0x3a>
    2ef2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ef6:	00 97       	sbiw	r24, 0x00	; 0
    2ef8:	61 f0       	breq	.+24     	; 0x2f12 <LCD_moveCursor+0x50>
    2efa:	19 c0       	rjmp	.+50     	; 0x2f2e <LCD_moveCursor+0x6c>
    2efc:	2c 81       	ldd	r18, Y+4	; 0x04
    2efe:	3d 81       	ldd	r19, Y+5	; 0x05
    2f00:	22 30       	cpi	r18, 0x02	; 2
    2f02:	31 05       	cpc	r19, r1
    2f04:	69 f0       	breq	.+26     	; 0x2f20 <LCD_moveCursor+0x5e>
    2f06:	8c 81       	ldd	r24, Y+4	; 0x04
    2f08:	9d 81       	ldd	r25, Y+5	; 0x05
    2f0a:	83 30       	cpi	r24, 0x03	; 3
    2f0c:	91 05       	cpc	r25, r1
    2f0e:	61 f0       	breq	.+24     	; 0x2f28 <LCD_moveCursor+0x66>
    2f10:	0e c0       	rjmp	.+28     	; 0x2f2e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2f12:	8b 81       	ldd	r24, Y+3	; 0x03
    2f14:	89 83       	std	Y+1, r24	; 0x01
    2f16:	0b c0       	rjmp	.+22     	; 0x2f2e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2f18:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1a:	80 5c       	subi	r24, 0xC0	; 192
    2f1c:	89 83       	std	Y+1, r24	; 0x01
    2f1e:	07 c0       	rjmp	.+14     	; 0x2f2e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2f20:	8b 81       	ldd	r24, Y+3	; 0x03
    2f22:	80 5f       	subi	r24, 0xF0	; 240
    2f24:	89 83       	std	Y+1, r24	; 0x01
    2f26:	03 c0       	rjmp	.+6      	; 0x2f2e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2f28:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2a:	80 5b       	subi	r24, 0xB0	; 176
    2f2c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2f2e:	89 81       	ldd	r24, Y+1	; 0x01
    2f30:	80 68       	ori	r24, 0x80	; 128
    2f32:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <LCD_sendCommand>
}
    2f36:	0f 90       	pop	r0
    2f38:	0f 90       	pop	r0
    2f3a:	0f 90       	pop	r0
    2f3c:	0f 90       	pop	r0
    2f3e:	0f 90       	pop	r0
    2f40:	cf 91       	pop	r28
    2f42:	df 91       	pop	r29
    2f44:	08 95       	ret

00002f46 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2f46:	df 93       	push	r29
    2f48:	cf 93       	push	r28
    2f4a:	00 d0       	rcall	.+0      	; 0x2f4c <LCD_displayStringRowColumn+0x6>
    2f4c:	00 d0       	rcall	.+0      	; 0x2f4e <LCD_displayStringRowColumn+0x8>
    2f4e:	cd b7       	in	r28, 0x3d	; 61
    2f50:	de b7       	in	r29, 0x3e	; 62
    2f52:	89 83       	std	Y+1, r24	; 0x01
    2f54:	6a 83       	std	Y+2, r22	; 0x02
    2f56:	5c 83       	std	Y+4, r21	; 0x04
    2f58:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2f5a:	89 81       	ldd	r24, Y+1	; 0x01
    2f5c:	6a 81       	ldd	r22, Y+2	; 0x02
    2f5e:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2f62:	8b 81       	ldd	r24, Y+3	; 0x03
    2f64:	9c 81       	ldd	r25, Y+4	; 0x04
    2f66:	0e 94 38 17 	call	0x2e70	; 0x2e70 <LCD_displayString>
}
    2f6a:	0f 90       	pop	r0
    2f6c:	0f 90       	pop	r0
    2f6e:	0f 90       	pop	r0
    2f70:	0f 90       	pop	r0
    2f72:	cf 91       	pop	r28
    2f74:	df 91       	pop	r29
    2f76:	08 95       	ret

00002f78 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2f78:	df 93       	push	r29
    2f7a:	cf 93       	push	r28
    2f7c:	cd b7       	in	r28, 0x3d	; 61
    2f7e:	de b7       	in	r29, 0x3e	; 62
    2f80:	62 97       	sbiw	r28, 0x12	; 18
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	de bf       	out	0x3e, r29	; 62
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	cd bf       	out	0x3d, r28	; 61
    2f8c:	9a 8b       	std	Y+18, r25	; 0x12
    2f8e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2f90:	89 89       	ldd	r24, Y+17	; 0x11
    2f92:	9a 89       	ldd	r25, Y+18	; 0x12
    2f94:	9e 01       	movw	r18, r28
    2f96:	2f 5f       	subi	r18, 0xFF	; 255
    2f98:	3f 4f       	sbci	r19, 0xFF	; 255
    2f9a:	b9 01       	movw	r22, r18
    2f9c:	4a e0       	ldi	r20, 0x0A	; 10
    2f9e:	50 e0       	ldi	r21, 0x00	; 0
    2fa0:	0e 94 47 18 	call	0x308e	; 0x308e <itoa>
   LCD_displayString(buff); /* Display the string */
    2fa4:	ce 01       	movw	r24, r28
    2fa6:	01 96       	adiw	r24, 0x01	; 1
    2fa8:	0e 94 38 17 	call	0x2e70	; 0x2e70 <LCD_displayString>
}
    2fac:	62 96       	adiw	r28, 0x12	; 18
    2fae:	0f b6       	in	r0, 0x3f	; 63
    2fb0:	f8 94       	cli
    2fb2:	de bf       	out	0x3e, r29	; 62
    2fb4:	0f be       	out	0x3f, r0	; 63
    2fb6:	cd bf       	out	0x3d, r28	; 61
    2fb8:	cf 91       	pop	r28
    2fba:	df 91       	pop	r29
    2fbc:	08 95       	ret

00002fbe <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2fbe:	df 93       	push	r29
    2fc0:	cf 93       	push	r28
    2fc2:	cd b7       	in	r28, 0x3d	; 61
    2fc4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <LCD_sendCommand>
}
    2fcc:	cf 91       	pop	r28
    2fce:	df 91       	pop	r29
    2fd0:	08 95       	ret

00002fd2 <__divmodhi4>:
    2fd2:	97 fb       	bst	r25, 7
    2fd4:	09 2e       	mov	r0, r25
    2fd6:	07 26       	eor	r0, r23
    2fd8:	0a d0       	rcall	.+20     	; 0x2fee <__divmodhi4_neg1>
    2fda:	77 fd       	sbrc	r23, 7
    2fdc:	04 d0       	rcall	.+8      	; 0x2fe6 <__divmodhi4_neg2>
    2fde:	0c d0       	rcall	.+24     	; 0x2ff8 <__udivmodhi4>
    2fe0:	06 d0       	rcall	.+12     	; 0x2fee <__divmodhi4_neg1>
    2fe2:	00 20       	and	r0, r0
    2fe4:	1a f4       	brpl	.+6      	; 0x2fec <__divmodhi4_exit>

00002fe6 <__divmodhi4_neg2>:
    2fe6:	70 95       	com	r23
    2fe8:	61 95       	neg	r22
    2fea:	7f 4f       	sbci	r23, 0xFF	; 255

00002fec <__divmodhi4_exit>:
    2fec:	08 95       	ret

00002fee <__divmodhi4_neg1>:
    2fee:	f6 f7       	brtc	.-4      	; 0x2fec <__divmodhi4_exit>
    2ff0:	90 95       	com	r25
    2ff2:	81 95       	neg	r24
    2ff4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff6:	08 95       	ret

00002ff8 <__udivmodhi4>:
    2ff8:	aa 1b       	sub	r26, r26
    2ffa:	bb 1b       	sub	r27, r27
    2ffc:	51 e1       	ldi	r21, 0x11	; 17
    2ffe:	07 c0       	rjmp	.+14     	; 0x300e <__udivmodhi4_ep>

00003000 <__udivmodhi4_loop>:
    3000:	aa 1f       	adc	r26, r26
    3002:	bb 1f       	adc	r27, r27
    3004:	a6 17       	cp	r26, r22
    3006:	b7 07       	cpc	r27, r23
    3008:	10 f0       	brcs	.+4      	; 0x300e <__udivmodhi4_ep>
    300a:	a6 1b       	sub	r26, r22
    300c:	b7 0b       	sbc	r27, r23

0000300e <__udivmodhi4_ep>:
    300e:	88 1f       	adc	r24, r24
    3010:	99 1f       	adc	r25, r25
    3012:	5a 95       	dec	r21
    3014:	a9 f7       	brne	.-22     	; 0x3000 <__udivmodhi4_loop>
    3016:	80 95       	com	r24
    3018:	90 95       	com	r25
    301a:	bc 01       	movw	r22, r24
    301c:	cd 01       	movw	r24, r26
    301e:	08 95       	ret

00003020 <__prologue_saves__>:
    3020:	2f 92       	push	r2
    3022:	3f 92       	push	r3
    3024:	4f 92       	push	r4
    3026:	5f 92       	push	r5
    3028:	6f 92       	push	r6
    302a:	7f 92       	push	r7
    302c:	8f 92       	push	r8
    302e:	9f 92       	push	r9
    3030:	af 92       	push	r10
    3032:	bf 92       	push	r11
    3034:	cf 92       	push	r12
    3036:	df 92       	push	r13
    3038:	ef 92       	push	r14
    303a:	ff 92       	push	r15
    303c:	0f 93       	push	r16
    303e:	1f 93       	push	r17
    3040:	cf 93       	push	r28
    3042:	df 93       	push	r29
    3044:	cd b7       	in	r28, 0x3d	; 61
    3046:	de b7       	in	r29, 0x3e	; 62
    3048:	ca 1b       	sub	r28, r26
    304a:	db 0b       	sbc	r29, r27
    304c:	0f b6       	in	r0, 0x3f	; 63
    304e:	f8 94       	cli
    3050:	de bf       	out	0x3e, r29	; 62
    3052:	0f be       	out	0x3f, r0	; 63
    3054:	cd bf       	out	0x3d, r28	; 61
    3056:	09 94       	ijmp

00003058 <__epilogue_restores__>:
    3058:	2a 88       	ldd	r2, Y+18	; 0x12
    305a:	39 88       	ldd	r3, Y+17	; 0x11
    305c:	48 88       	ldd	r4, Y+16	; 0x10
    305e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3060:	6e 84       	ldd	r6, Y+14	; 0x0e
    3062:	7d 84       	ldd	r7, Y+13	; 0x0d
    3064:	8c 84       	ldd	r8, Y+12	; 0x0c
    3066:	9b 84       	ldd	r9, Y+11	; 0x0b
    3068:	aa 84       	ldd	r10, Y+10	; 0x0a
    306a:	b9 84       	ldd	r11, Y+9	; 0x09
    306c:	c8 84       	ldd	r12, Y+8	; 0x08
    306e:	df 80       	ldd	r13, Y+7	; 0x07
    3070:	ee 80       	ldd	r14, Y+6	; 0x06
    3072:	fd 80       	ldd	r15, Y+5	; 0x05
    3074:	0c 81       	ldd	r16, Y+4	; 0x04
    3076:	1b 81       	ldd	r17, Y+3	; 0x03
    3078:	aa 81       	ldd	r26, Y+2	; 0x02
    307a:	b9 81       	ldd	r27, Y+1	; 0x01
    307c:	ce 0f       	add	r28, r30
    307e:	d1 1d       	adc	r29, r1
    3080:	0f b6       	in	r0, 0x3f	; 63
    3082:	f8 94       	cli
    3084:	de bf       	out	0x3e, r29	; 62
    3086:	0f be       	out	0x3f, r0	; 63
    3088:	cd bf       	out	0x3d, r28	; 61
    308a:	ed 01       	movw	r28, r26
    308c:	08 95       	ret

0000308e <itoa>:
    308e:	fb 01       	movw	r30, r22
    3090:	9f 01       	movw	r18, r30
    3092:	e8 94       	clt
    3094:	42 30       	cpi	r20, 0x02	; 2
    3096:	c4 f0       	brlt	.+48     	; 0x30c8 <itoa+0x3a>
    3098:	45 32       	cpi	r20, 0x25	; 37
    309a:	b4 f4       	brge	.+44     	; 0x30c8 <itoa+0x3a>
    309c:	4a 30       	cpi	r20, 0x0A	; 10
    309e:	29 f4       	brne	.+10     	; 0x30aa <itoa+0x1c>
    30a0:	97 fb       	bst	r25, 7
    30a2:	1e f4       	brtc	.+6      	; 0x30aa <itoa+0x1c>
    30a4:	90 95       	com	r25
    30a6:	81 95       	neg	r24
    30a8:	9f 4f       	sbci	r25, 0xFF	; 255
    30aa:	64 2f       	mov	r22, r20
    30ac:	77 27       	eor	r23, r23
    30ae:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__udivmodhi4>
    30b2:	80 5d       	subi	r24, 0xD0	; 208
    30b4:	8a 33       	cpi	r24, 0x3A	; 58
    30b6:	0c f0       	brlt	.+2      	; 0x30ba <itoa+0x2c>
    30b8:	89 5d       	subi	r24, 0xD9	; 217
    30ba:	81 93       	st	Z+, r24
    30bc:	cb 01       	movw	r24, r22
    30be:	00 97       	sbiw	r24, 0x00	; 0
    30c0:	a1 f7       	brne	.-24     	; 0x30aa <itoa+0x1c>
    30c2:	16 f4       	brtc	.+4      	; 0x30c8 <itoa+0x3a>
    30c4:	5d e2       	ldi	r21, 0x2D	; 45
    30c6:	51 93       	st	Z+, r21
    30c8:	10 82       	st	Z, r1
    30ca:	c9 01       	movw	r24, r18
    30cc:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <strrev>

000030d0 <strrev>:
    30d0:	dc 01       	movw	r26, r24
    30d2:	fc 01       	movw	r30, r24
    30d4:	67 2f       	mov	r22, r23
    30d6:	71 91       	ld	r23, Z+
    30d8:	77 23       	and	r23, r23
    30da:	e1 f7       	brne	.-8      	; 0x30d4 <strrev+0x4>
    30dc:	32 97       	sbiw	r30, 0x02	; 2
    30de:	04 c0       	rjmp	.+8      	; 0x30e8 <strrev+0x18>
    30e0:	7c 91       	ld	r23, X
    30e2:	6d 93       	st	X+, r22
    30e4:	70 83       	st	Z, r23
    30e6:	62 91       	ld	r22, -Z
    30e8:	ae 17       	cp	r26, r30
    30ea:	bf 07       	cpc	r27, r31
    30ec:	c8 f3       	brcs	.-14     	; 0x30e0 <strrev+0x10>
    30ee:	08 95       	ret

000030f0 <_exit>:
    30f0:	f8 94       	cli

000030f2 <__stop_program>:
    30f2:	ff cf       	rjmp	.-2      	; 0x30f2 <__stop_program>
